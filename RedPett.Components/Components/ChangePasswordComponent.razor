@using ReDpett.Modal.AppConstants;
@using ReDpett.Modal.Login;
@using ReDpett.Service;
@using Microsoft.AspNetCore.Components.Forms
@using ReDpett_API.Modal;
@using System.Text.RegularExpressions;
@using Xamarin.Essentials;
@using Blazored.LocalStorage
@inject ILocalStorageService local;
@inject NavigationManager NavigationManager;
@using MudBlazor
@inject ISnackbar Snackbar

<EditForm Model=@lgn OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
    <DataAnnotationsValidator />
    <div class="log-body auth-page-wrapper">
        <div class="sign-bg">
            <section class="section-head">
                <div class="container">
                    <div class="logo text-center"><a href="/"><img src="images/logo.png" alt="#"></a></div>
                </div>
            </section>
            <div class="sign-form">
                <div class="container">
                    <div class="sign-tlt">Change your password</div>
                    <div class="input-field">
                        <label>Password</label>
                        <InputText @oninput="ValidatePassword" type="password" onfocusout="@(!context.Validate())" @bind-Value=lgn.Password class="form-control" id="Password" placeholder="Password" />
                        <ValidationMessage For="@(() => lgn.Password)" style="color: #4d4d4d" />
                    </div>
                    <div class="input-field">
                        <label>Confirm Password</label>
                        <InputText @oninput="ValidatePassword" type="password" onfocusout="@(!context.Validate())" @bind-Value=lgn.ConfirmPassword class="form-control" id="Password" placeholder="Password" />
                        <ValidationMessage For="@(() => lgn.ConfirmPassword)" style="color: #4d4d4d" />
                    </div>
                    <br />
                    <div class="input-field form-set-repeat">
                        <MudButton Variant="Variant.Filled" ButtonType="MudBlazor.ButtonType.Submit" Class="w-100 pa-3" style="background-color:#2a73a3;color:white;" Size="Size.Small">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Logging In</MudText>
                            }
                            else
                            {
                                <MudText>Change</MudText>
                            }
                        </MudButton>
                    </div>
                    <div class="form-group text-center  rest"> <a href="/login">Login</a> </div>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    ChangePassRequesModel lgn = new ChangePassRequesModel();
    string LastSubmitResult;
    RestService restService;
    private bool _processing = false;

    void RefreshUI()
    {
        LastSubmitResult = "Please fill email field.";
        StateHasChanged();
    }
    string passwordError;

    void ValidatePassword()
    {
        if (!string.IsNullOrEmpty(lgn.Password))
        {
            var passwordPattern = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$";
            var regex = new Regex(passwordPattern);

            if (!regex.IsMatch(lgn.Password))
            {
                passwordError = "Password must be at least 8 characters long and contain at least one lowercase letter, one uppercase letter, and one digit.";
                return;
            }
        }
        StateHasChanged();
        passwordError = null;
    }


    async Task ValidFormSubmitted()
    {
        if (string.IsNullOrEmpty(lgn.Password))
        {
            LastSubmitResult = "Please fill password field.";
            return;
        }
        _processing = true;
        restService = new RestService();
    }

    void InvalidFormSubmitted()
    {
        LastSubmitResult = "Invalid email or password field.";
    }
}