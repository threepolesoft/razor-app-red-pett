@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.JSInterop;
@using Newtonsoft.Json;
@using ReDpett.Common.Modal;
@using ReDpett.Common.ViewModel;
@using ReDpett.Service;
@using System.Net.Http.Headers;
@using System.Text;
@using ReDpett_API.Modal;
@using Blazored.LocalStorage;
@inject ILocalStorageService local;
@inject NavigationManager NavigationManager;
@inject IJSRuntime js;
@inject ListIntermediateResidentData _listDataT;
@inject ListIntermediateResidentData _listData;
@inject ListIntermediateResidentData _listData2;
@inject ListIntermediateResidentData _listData3;
@inject IntermediateResidentDataService _OfflineDataService;
@inject HttpClient Http;
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject IDialogService DialogService
@using MudBlazor;
<link href="IntermediateResidents/css/style.css" rel="stylesheet" />
<link href="IntermediateResidents/css/all.css" rel="stylesheet" />

<div class="inner-page-wrapper">
    <div class="header-wrap">
        <div class="back-top-page" @onclick=GoPrevPage>
            <span class="back-btn">
                <img src="images/back.png" style="width:20px;height:20px" alt="img" />
            </span>
        </div>
    </div>
    <div class="page-wrp">
        <div class="container short">
            <div class="wrap-innr">
                <!--[Header]-->
                <header style="border-bottom: 1px solid #EAEAEA;background-color: white !important;color:black;margin: 0;padding: 20px 30px;">
                    <h1 style="font-size:30px">ReDPeTT Data Entry for Intermediate and Advanced Tier Resident Projects</h1>
                </header>
                <!--[/Header]-->
                <form id="signUpForm" class="form-stap" action="#!">
                    <!-- start previous / next buttons -->
                    <div class="form-footer d-flex btnhd">
                        <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                        @*@if (isShowSubmit)
                        {*@
                        @*                        <button type="button" @onclick=SaveData>Submit </button>
                        *@                        @*}*@
                        <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    </div>
                    <!-- end previous / next buttons -->
                    <!-- start step indicators -->
                    <div class="form-header d-flex mb-4">
                        <span class="stepIndicator" data-step_type="1"><strong>1</strong></span> <span class="stepIndicator" data-step_type="2"><strong>2</strong></span> <span class="stepIndicator" data-step_type="3"><strong>3</strong></span> <span class="stepIndicator" data-step_type="4"><strong>4</strong></span>
                        <!--<span class="stepIndicator" data-step_type="5"><strong>5</strong></span>-->
                    </div>
                    <!-- end step indicators -->
                    <!-- step one -->
                    <div class="step step1">
                        <div class="min-tltl">Initial Project Data</div>
                        <div class="mb-3" style="display:none">
                            <label>FETP <sup style="color:red">*</sup></label> <MudTooltip Text="@tooltip.FETP" Arrow="true" Placement="Placement.Top">
                                <span style="font-weight:bolder;cursor:pointer;width: 25px">?</span>
                            </MudTooltip>

                            <select id="sRoleId" value="@data.FETP" class="form-control w-100" onchange="valuechange()">
                                <option value=""> Select </option>
                                @foreach (var item in ProjectStatus)
                                {
                                    <option value="@item.projectstatus"> @item.projectstatus </option>
                                }
                            </select>

                            <span value="@dummyvalue" style="color:red;font-size:11px" id="fetpspan"></span>
                        </div>

                        <div class="mb-3">
                            <label>Project Type <sup>*</sup></label>
                            <MudIconButton Icon="@Icons.TwoTone.Help" Color="Color.Default" Size="Size.Small" aria-label="HelpProjType" OnClick="@ToggleOpenProjType"> </MudIconButton>

                            <MudPopover Open="@_isOpenProjType" Fixed="true" Class="px-4 pt-4" RelativeWidth AnchorOrigin="Origin.BottomLeft">
                                <div class="d-flex flex-column" AnchorOrigin="Origin.BottomLeft">
                                    <MudText>@tooltip.ProjectType</MudText>
                                    <MudButton OnClick="@ToggleOpenProjType" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                                </div>
                            </MudPopover>
                            @code {
                                public bool _isOpenProjType;
                                public void ToggleOpenProjType()
                                {
                                    if (_isOpenProjType)
                                        _isOpenProjType = false;
                                    else
                                        _isOpenProjType = true;
                                }
                            }
                            <select value="@data.TypeId" oninput="myFunction1()" class="form-select" id="pj" aria-label="Disabled select example" @onchange="Rolechanged">
                                <option value="0"> Select </option>
                                @if (codetypeclasses != null)
                                {
                                    @foreach (var item in codetypeclasses)
                                    {
                                        <option value="@item.ID"> @item.Type </option>
                                    }
                                }
                            </select>
                            <span style="color:red;font-size:11px" id="ptspan"></span>
                        </div>
                        @if (isShowSummary)
                        {
                            <div class="ojec-head">
                                <h5>Responses to Umbrella Protocol Questions</h5>
                            </div>
                            <div class="mb-3">
                                <div class="project-list-repeat">
                                    <div class="project-list-data">
                                        <span>Description of Problem:</span>  &nbsp;  &nbsp;  &nbsp;  <h3>@data.problemDescription</h3>
                                        <hr>
                                        <span>Investigation Team Composition:</span> &nbsp;  &nbsp;  &nbsp;   <p class="project-created-by">@data.TeamComposition</p>  <hr>
                                        <span>Objectives of the Investigtaion:</span>  &nbsp;  &nbsp;  &nbsp;   <p>@data.InvestivationObjective</p>  <hr>
                                    </div>
                                    <div class="project-list-action">
                                        <span class="priject-list-action-btn" style="cursor:pointer;" @onclick="() => Open()"><img src="images/edit.svg" alt="img" /></span>

                                    </div>
                                </div>
                            </div>
                        }

                        <div class="mb-3">
                            <label>Project Classification <sup>*</sup></label> <MudTooltip Text="@tooltip.ProjectClassification" Arrow="true" Placement="Placement.Top">
                                <span style="font-weight:bolder;cursor:pointer;width: 25px">?</span>
                            </MudTooltip>
                            <select @bind=data.ProjectClassification disabled class="form-select" aria-label="Disabled select example">
                                if(projectClassification !null)
                                {
                                @foreach (var item in projectClassification)
                                {
                                    <option value=""></option>
                                    <option value="@item.projectclassification"> @item.projectclassification </option>
                                }
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>Date Assigned <sup style="color:red">*</sup> <MudIconButton Icon="@Icons.TwoTone.Help" Color="Color.Default" Size="Size.Small" aria-label="Help" OnClick="@ToggleOpen"> </MudIconButton> </label>

                            <div class="input-group date form-group input-field date-tm">
                                <MudDatePicker @bind-Date="assignedDate" id="pAssigned" Placeholder="dd/mm/yyyy" Editable="false" PickerClosed="OnDateChange" PickerVariant="PickerVariant.Dialog" DisableToolbar="false" Style="padding: inherit" />
                                <MudPopover Open="@_isOpen" Fixed="true" Class="px-4 pt-4" RelativeWidth AnchorOrigin="Origin.BottomLeft">
                                    <div class="d-flex flex-column">
                                        <MudText>@tooltip.DateAssigned</MudText>
                                        <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                                    </div>
                                </MudPopover>
                                @code {
                                    public bool _isOpen;

                                    public void ToggleOpen()
                                    {
                                        if (_isOpen)
                                            _isOpen = false;
                                        else
                                            _isOpen = true;
                                    }
                                }
                            </div>

                            <span style="color:red;font-size:11px;display:@display1" id="daspan"></span>

                        </div>
                        <div class="mb-3">
                            <label>Title of the Project <sup style="color:red">*</sup> </label>
                            <MudIconButton Icon="@Icons.TwoTone.Help" Color="Color.Default" Size="Size.Small" aria-label="HelpTitle" OnClick="@ToggleOpenTitle"> </MudIconButton>

                            <MudPopover Open="@_isOpenTitle" Fixed="true" Class="px-4 pt-4" RelativeWidth AnchorOrigin="Origin.BottomLeft">
                                <div class="d-flex flex-column" AnchorOrigin="Origin.BottomLeft">
                                    <MudText>@tooltip.Title</MudText>
                                    <MudButton OnClick="@ToggleOpenTitle" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                                </div>
                            </MudPopover>
                            @code {
                                public bool _isOpenTitle;

                                public void ToggleOpenTitle()
                                {
                                    if (_isOpenTitle)
                                        _isOpenTitle = false;
                                    else
                                        _isOpenTitle = true;
                                }
                            }
                            <input @bind=data.projecttitle oninput="myFunction()" type="text" id="pTitle" name="Project Title">
                            <span style="color:red;font-size:11px" id="pttspan"></span>
                        </div>

                        <div class="guida-hed">
                            <h3>Project Team</h3>
                        </div>
                        <div class="mb-3">
                            <label>Lead Resident </label>
                            @if (Role == "Non-Resident")
                            {
                                <select @bind="@data.LeadResident" class="form-select" aria-label="Disabled select example">
                                    @if (data.LeadResidents != null)
                                    {
                                        @foreach (var item in data.LeadResidents)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }
                                </select>
                            }
                            else
                            {
                                <input type="text" id="sub" @bind=data.LeadResident placeholder="" name="Resident Name" style="border-radius: 5px !important">

                            }

                        </div>
                        <div class="mb-3">
                            <label>Team Members<sup>*</sup></label>
                            <div class="appd-row teamMembers" data-role="appendRow">
                                @if (data.TeamMembers == null || data.TeamMembers.Count == 0)
                                {
                                    <div class="form-inline form-row">
                                        <div class="aprow w-100">
                                            <div class="d-flex gap-2 me-2">
                                                <button class="btn btn-sm btn-danger  mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                                <button class="btn btn-sm btn-primary  mb-2" data-role="add"> <i class="fa fa-plus"></i> </button>
                                            </div>
                                            <select class="form-select" @bind=data.TraineeAssigned aria-label="Disabled select example">
                                                <option>select</option>
                                                @if (data.TeamMembers != null)
                                                {
                                                    @foreach (var item in data.TeamMembers)
                                                    {
                                                        <option value="@item">@item</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @*@foreach (string val in data.TeamMembers)
                                {*@
                                    <div class="form-inline form-row">
                                        <div class="aprow w-100">
                                            <div class="d-flex gap-2 me-2">
                                                @*<div class="btn-cl">*@
                                                <button class="btn btn-sm btn-danger  mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                                <button class="btn btn-sm btn-primary  mb-2" data-role="add"> <i class="fa fa-plus"></i> </button>
                                            </div>
                                            <select class="form-select" @bind=data.TraineeAssigned aria-label="Disabled select example">
                                                <option>select</option>
                                                @if (data.TeamMembers != null)
                                                {
                                                    @foreach (var item in data.TeamMembers)
                                                    {
                                                        <option value="@item">@item</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    @*  }*@
                                }

                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input type="checkbox" @bind="@data.CurrentORpostGraduate" class="form-check-input" id="exampleCheck1">
                                <label class="form-check-label" for="exampleCheck1">Show Current Residents and Alumni</label>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Mentors<sup>*</sup></label>
                            <div class="appd-row mentors" data-role="appendRow">
                                @if (data.Mentors == null || data.Mentors.Count == 0)
                                {
                                    <div class="form-inline form-row">
                                        <div class="aprow w-100">
                                            <div class="d-flex gap-2 me-2">
                                                @*<div class="btn-cl">*@
                                                <button class="btn btn-sm btn-danger  mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                                <button class="btn btn-sm btn-primary  mb-2" data-role="add"> <i class="fa fa-plus"></i> </button>
                                            </div>
                                            <select class="form-select" @bind=data.MentorFullName aria-label="Disabled select example">
                                                <option>select</option>
                                                @if (data.Mentors != null)
                                                {
                                                    @foreach (var item in data.Mentors)
                                                    {
                                                        <option value="@item">@item</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @* @foreach (string val in data.Mentors)
                                {*@
                                    <div class="form-inline form-row">
                                        <div class="aprow w-100">
                                            <div class="d-flex gap-2 me-2">
                                                @*<div class="btn-cl">*@
                                                <button class="btn btn-sm btn-danger  mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                                <button class="btn btn-sm btn-primary  mb-2" data-role="add"> <i class="fa fa-plus"></i> </button>
                                            </div>
                                            <select class="form-select" @bind=data.MentorFullName aria-label="Disabled select example">
                                                <option>select</option>
                                                @if (data.Mentors != null)
                                                {
                                                    @foreach (var item in data.Mentors)
                                                    {
                                                        <option value="@item">@item</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    @*}*@
                                }

                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Supervisor Name <sup>*</sup> </label>
                            <select @bind="@data.SupervisorFullName" class="form-select" aria-label="Disabled select example">
                                @if (data.Supervisors != null)
                                {
                                    @foreach (var item in data.Supervisors)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                            <span style="color:red;font-size:11px" id="pttspan"></span>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input @bind=data.SenstiveData type="checkbox" class="form-check-input" id="exampleCheck1">
                                <label class="form-check-label" for="exampleCheck1">Per country parameters this project is considered sensitive in nature. Please handle data with extreme caution.</label>
                            </div>
                        </div>
                        <div class="guida-hed">
                            <h3>Attachments and Written Communications</h3>
                        </div>
                        <div class="appd-row" data-role="appendRow1">
                            @if (data.WrittenCommunications != null && data.WrittenCommunications.Count > 0)
                            {
                                for (var i = 0; i < data.WrittenCommunications.Count; i++)
                                {
                                    var writtenC = data.WrittenCommunications[i];
                                    @if (isSHowUmbrellaText)
                                    {
                                        <span style="font-size:14px;margin-bottom:6px">Please be sure to submit a copy of the data collection instrument(s). Forexample: surveys, questionnaires, and data abstraction forms.</span>

                                        <br>
                                    }

                                    <div class="form-inline form-row">
                                        <div class="aprow">
                                            <div class="btn-cl">
                                                <button class="btn btn-sm btn-danger  mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                                <button class="btn btn-sm btn-primary  mb-2" data-role="add"> <i class="fa fa-plus"></i> </button>
                                            </div>
                                            <div class="form-sx">
                                                <div class="col-rm mb-3">

                                                    <label>Resident Name</label><br>
                                                    @if (Role == "Non-Resident")
                                                    {
                                                        <select @bind="@writtenC.ResidentName" class="form-select" aria-label="Disabled select example">
                                                            @if (data.LeadResidents != null)
                                                            {
                                                                @foreach (var item in data.LeadResidents)
                                                                {
                                                                    <option value="@item">@item</option>
                                                                }
                                                            }
                                                        </select>
                                                    }
                                                    else
                                                    {
                                                        <input type="text" id="residName" @bind=@writtenC.ResidentName placeholder="" name="Resident Name" style="border-radius: 5px !important">

                                                    }
                                                </div>
                                                <div class="col-rm mb-3">
                                                    <input @bind=@writtenC.CurrentResident type="checkbox" class="form-check-input" id="currentresid">
                                                    <label class="form-check-label" for="exampleCheck1">Current Residents</label>
                                                </div>
                                                <div class="col-rm mb-3">
                                                    <div class="dseb">
                                                        <label class="chda">Required Communication</label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        @if (!string.IsNullOrEmpty(writtenC.RequiredCommunication) && writtenC.RequiredCommunication.Equals("1"))
                                                        {
                                                            <input class="form-check-input" type="radio" name="ReqCom" id="req" value="1" checked>
                                                            <label class="form-check-label" for="ReqCom">Yes</label>
                                                        }
                                                        else
                                                        {
                                                            <input class="form-check-input" type="radio" name="ReqCom" id="req" value="1">
                                                            <label class="form-check-label" for="ReqCom">Yes</label>
                                                        }
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        @if (!string.IsNullOrEmpty(writtenC.RequiredCommunication) && writtenC.RequiredCommunication.Equals("0"))
                                                        {
                                                            <input class="form-check-input" type="radio" name="ReqCom" id="req" value="0" checked>
                                                            <label class="form-check-label" for="ReqCom">No</label>
                                                        }
                                                        else
                                                        {
                                                            <input class="form-check-input" type="radio" name="ReqCom" id="req" value="0">
                                                            <label class="form-check-label" for="ReqCom">No</label>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="col-rm mb-3">
                                                    <div class="dseb">
                                                        <label class="chda">Accepted</label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        @if (!string.IsNullOrEmpty(writtenC.Accepted) && writtenC.Accepted.Equals("1"))
                                                        {
                                                            <input class="form-check-input" type="radio" name="Accepted" id="acc" value="1" checked>
                                                            <label class="form-check-label" for="Accepted">Yes</label>
                                                        }
                                                        else
                                                        {
                                                            <input class="form-check-input" type="radio" name="Accepted" id="acc" value="1">
                                                            <label class="form-check-label" for="Accepted">Yes</label>
                                                        }
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        @if (!string.IsNullOrEmpty(writtenC.Accepted) && writtenC.Accepted.Equals("0"))
                                                        {
                                                            <input class="form-check-input" type="radio" name="Accepted" id="acc" value="0" checked>
                                                            <label class="form-check-label" for="Accepted">No</label>
                                                        }
                                                        else
                                                        {
                                                            <input class="form-check-input" type="radio" name="Accepted" id="acc" value="0">
                                                            <label class="form-check-label" for="Accepted">No</label>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="col-rm">
                                                    <label>Title of communication project</label>
                                                    <input type="text" placeholder="" id="tit" name="" value="@writtenC.Report_Title">
                                                </div>
                                                <div class="col-rm">
                                                    <label>Suspected Disease/Event</label>
                                                    <select @bind="@data.DiseaseSuspected" class="form-select" aria-label="Disabled select example">

                                                        <option>-Select-</option>

                                                        @foreach (var item in codeDisease)
                                                        {
                                                            <option value="@item.Disease"> @item.Disease </option>
                                                        }
                                                    </select>
                                                </div>
                                                <div class="col-rm">
                                                    <label>Type of communication product</label>
                                                    <select @bind="@writtenC.TypeOfReport" class="form-select" aria-label="Disabled select example">

                                                        <option>-Select-</option>
                                                        @if (codereqwritingtype1 != null)
                                                        {
                                                            @foreach (var item in codereqwritingtype1)
                                                            {
                                                                <option value="@item"> @item </option>
                                                            }
                                                        }
                                                    </select>
                                                </div>
                                                <div class="col-rm mt-2">
                                                    <label>File Upload</label>
                                                    <input type="file" name="file" id="@("file" + i.ToString())" class="input-file">

                                                    @if (hasfile == null)
                                                    {
                                                        <label for="@("file" + i.ToString())" class="btn btn-tertiary"> <i class="fa-solid fa-upload"></i> <span class="js-fileName">@writtenC.Att_FileName</span> </label>
                                                    }
                                                    else if (hasfile != null)
                                                    {
                                                        <label class="btn btn-tertiary js-labelFile"> <i class="fa-solid fa-download" @onclick=@(()=>DownloadFile(writtenC.File_Att,writtenC.Att_FileName))></i> <span class="js-fileName">@writtenC.Att_FileName</span> <i class="fa fa-close" @onclick=@(()=>RemoveFileUp())></i> </label>
                                                        <label for="@("file" + i.ToString())" class="btn btn-tertiary js-labelFile js-labelFile-upload d-none"> <i class="fa-solid fa-upload"></i> <span class="js-fileName">Choose a file</span> </label>

                                                    }
                                                    <textarea class="d-none">@(writtenC.ContentType + "|" + writtenC.FileSize + "|" + writtenC.File_Att)</textarea>
                                                </div>
                                                <div class="col-rm">
                                                    <label>Full Citation</label><br>
                                                    <input type="text" id="cit" @bind=@writtenC.FullCitation placeholder="" name="Resident Name" style="border-radius: 5px !important">
                                                </div>
                                                <div class="col-rm">
                                                    <label>Submitted to</label><br>
                                                    <input type="text" id="sub" @bind=@writtenC.SubmittedTo placeholder="" name="Resident Name" style="border-radius: 5px !important">
                                                </div>
                                                <div class="col-rm" style="margin-bottom: 29px;">
                                                    <label>Date of Submission</label><br>
                                                    <MudDatePicker id="pSubmissionDate" @bind-Date="SubmissionDate" Placeholder="dd/mm/yyyy" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                @if (isSHowUmbrellaText)
                                {
                                    <span style="font-size:14px;margin-bottom:6px">Please be sure to submit a copy of the data collection instrument(s). Forexample: surveys, questionnaires, and data abstraction forms.</span>

                                    <br>
                                }

                                <div class="form-inline form-row">
                                    <div class="aprow">
                                        <div class="btn-cl">
                                            <button class="btn btn-sm btn-danger  mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                            <button class="btn btn-sm btn-primary  mb-2" data-role="add"> <i class="fa fa-plus"></i> </button>
                                        </div>
                                        <div class="form-sx">
                                            <div class="col-rm mb-3">
                                                <label>Resident Name</label><br>
                                                @if (Role == "Non-Resident")
                                                {
                                                    <select class="form-select" aria-label="Disabled select example">
                                                        @if (data.LeadResidents != null)
                                                        {
                                                            @foreach (var item in data.LeadResidents)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <input type="text" placeholder="" id="residName" name="Resident Name" style="border-radius: 5px !important">

                                                }

                                            </div>
                                            <div class="col-rm mb-3">
                                                <input type="checkbox" class="form-check-input" id="currentresid">
                                                <label class="form-check-label" for="currentresid">Current Residents</label>
                                            </div>
                                            <div class="col-rm mb-3">
                                                <div class="dseb">
                                                    <label class="chda">Required Communication</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    @if (!string.IsNullOrEmpty(data.ValidityDate5) && data.ValidityDate5.Equals("1"))
                                                    {
                                                        <input class="form-check-input" type="radio" name="ReqCom" id="req" value="1" checked>
                                                        <label class="form-check-label" for="ReqCom">Yes</label>
                                                    }
                                                    else
                                                    {
                                                        <input class="form-check-input" type="radio" name="ReqCom" id="req" value="1">
                                                        <label class="form-check-label" for="ReqCom">Yes</label>
                                                    }
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    @if (!string.IsNullOrEmpty(data.ValidityDate5) && data.ValidityDate5.Equals("0"))
                                                    {
                                                        <input class="form-check-input" type="radio" name="ReqCom" id="req" value="0" checked>
                                                        <label class="form-check-label" for="ReqCom">No</label>
                                                    }
                                                    else
                                                    {
                                                        <input class="form-check-input" type="radio" name="ReqCom" id="req" value="0">
                                                        <label class="form-check-label" for="ReqCom">No</label>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-rm mb-3">
                                                <div class="dseb">
                                                    <label class="chda">Accepted</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    @if (!string.IsNullOrEmpty(data.ValidityDate5) && data.ValidityDate5.Equals("1"))
                                                    {
                                                        <input class="form-check-input" type="radio" name="Accepted" id="acc" value="1" checked>
                                                        <label class="form-check-label" for="Accepted">Yes</label>
                                                    }
                                                    else
                                                    {
                                                        <input class="form-check-input" type="radio" name="Accepted" id="acc" value="1">
                                                        <label class="form-check-label" for="Accepted">Yes</label>
                                                    }
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    @if (!string.IsNullOrEmpty(data.ValidityDate5) && data.ValidityDate5.Equals("0"))
                                                    {
                                                        <input class="form-check-input" type="radio" name="Accepted" id="acc" value="0" checked>
                                                        <label class="form-check-label" for="Accepted">No</label>
                                                    }
                                                    else
                                                    {
                                                        <input class="form-check-input" type="radio" name="Accepted" id="acc" value="0">
                                                        <label class="form-check-label" for="Accepted">No</label>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-rm mb-3">
                                                <label>Title of communication project</label>
                                                <input type="text" id="tit" placeholder="" name="">
                                            </div>
                                            <div class="col-rm mb-3">
                                                <label>Suspected Disease/Event</label>
                                                <select class="form-select" aria-label="Disabled select example">
                                                    <option>-Select-</option>

                                                    @foreach (var item in codeDisease)
                                                    {
                                                        <option value="@item.Disease"> @item.Disease </option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-rm mb-3">
                                                <label>Type of communication product</label>
                                                <select class="form-select" aria-label="Disabled select example">
                                                    <option>-Select-</option>
                                                    @if (codereqwritingtype1 != null)
                                                    {
                                                        @foreach (var item in codereqwritingtype1)
                                                        {
                                                            <option value="@item"> @item </option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-rm">
                                                <label>File Upload</label>
                                                <InputFile type="file" name="file" id="file1" class="input-file" OnChange="OnInputFileChange"></InputFile>
                                                <label for="file1" class="btn btn-tertiary js-labelFile js-labelFile-upload @(file == null ? "" : "d-none")"> <i class="fa-solid fa-upload"></i> <span class="js-fileName">Choose a file</span> </label>
                                                <label class="btn btn-tertiary js-labelFile @(file == null ? "d-none" : "")" data-target="file1"> <i class="fa-solid fa-download" @onclick=@(()=>DownloadFiles())></i> <span>@file</span> &nbsp;&nbsp; &nbsp;&nbsp  <i class="fa fa-close" @onclick=@(()=>RemoveFile())></i> </label>
                                                <textarea class="d-none"></textarea>
                                            </div>
                                            <div class="col-rm">
                                                <label>Full Citation</label><br>
                                                <input type="text" id="cit" placeholder="" name="Resident Name" style="border-radius: 5px !important">
                                            </div>
                                            <div class="col-rm">
                                                <label>Submitted to</label><br>
                                                <input type="text" id="sub" @bind=data.City placeholder="" name="Resident Name" style="border-radius: 5px !important">
                                            </div>
                                            <div class="col-rm" style="margin-bottom: 29px;">
                                                <label>Date of Submission</label>
                                                <MudDatePicker id="pSubmissionDate" Placeholder="dd/mm/yyyy" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            <!-- /div.form-inline -->
                        </div>
                        <div class="guida-hed">
                            @if (isShowUmbrella)
                            {
                                <h3>Umbrella Protocol </h3>
                                <div class="prw-tri">
                                    <button type="button" style=" width: 100%;background: transparent;color: #24A68A; font-size: 16px;cursor: pointer;border-radius: 0;margin: 12px 0 0;padding: 23px 0;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#um-protocol"><span class="pls">+</span> Provide Um Protocol Responses </button>
                                </div>
                            }
                            <label>General Comments</label>
                            <br>
                            <div class="appd-row GeneralComments" data-role="appendRow">
                                @if (data.CommentsTab != null && data.CommentsTab.Count > 0)
                                {
                                    for (var i = 0; i < data.CommentsTab.Count; i++)
                                    {
                                        var comments = data.CommentsTab[i];
                                        <div class="form-inline form-row">
                                            <div class="aprow gcomments" style="width:100%">
                                                <div class="d-flex gap-2 me-2">
                                                    @if (i == data.CommentsTab.Count - 1) // Check if the current row is the last row
                                                    {
                                                        <button class="btn btn-sm btn-primary mb-2" data-role="add"> <i class="fa fa-plus"></i> </button>
                                                        @if (data.CommentsTab.Count > 1)
                                                        {
                                                            <button class="btn btn-sm btn-danger mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-sm btn-danger mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                                    }
                                                </div>
                                                <MudTextField T="string" id="cText" @bind-Value="@comments.commentText" Label=@comments.commentDate Variant="Variant.Outlined" Lines="3" />
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="form-inline form-row">
                                        <div class="aprow gcomments" style="width:100%">
                                            <div class="d-flex gap-2 me-2">
                                                <button class="btn btn-sm btn-danger  mb-2" data-role="remove"> <i class="fa fa-minus"></i> </button>
                                                <button class="btn btn-sm btn-primary  mb-2" data-role="add"> <i class="fa fa-plus"></i> </button>
                                            </div>
                                            <MudTextField id="cText" T="string" Label=@LabelComment Variant="Variant.Outlined" Lines="3" />
                                        </div>
                                    </div>
                                }

                            </div>
                        </div>
                    </div>

                    <!-- step two -->
                    <div class="step step2">
                        <div class="min-tltl">Outbreak Investigation</div>
                        <div class="mb-3">
                            <label>Project Status</label>
                            <select class="form-select" @bind="data.ProjectStatus" aria-label="Disabled select example" disabled="@IsDropdownDisabled">
                                <option value=""> Select </option>
                                @foreach (var item in ProjectStatus1)
                                {
                                    <option value="@item.projectstatus"> @item.projectstatus </option>
                                }
                            </select>
                            @if (isShowDates)
                            {
                                <label>Date of outbreak start</label>
                                <div class="input-group date form-group input-field date-tm">
                                    <MudDatePicker @bind-Date="outbreakDate" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChangeoutBreak" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                </div>
                            }
                        </div>
                        <div class="mb-3 chda-row">
                            @if (isShowDates)
                            {
                                <div class="dseb">
                                    <label class="chda">Start Date Validity</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    @if (!string.IsNullOrEmpty(data.ValidityDate1) && data.ValidityDate1.Equals("1"))
                                    {
                                        <input class="form-check-input" type="radio" @onchange="validityChanged1" name="ValidityDate1" id="ValidityDate1" value="1" checked>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="radio" @onchange="validityChanged1" name="ValidityDate1" id="ValidityDate1" value="1">
                                    }
                                    <label class="form-check-label" for="ValidityDate1">Actual</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    @if (!string.IsNullOrEmpty(data.ValidityDate1) && data.ValidityDate1.Equals("2"))
                                    {
                                        <input class="form-check-input" type="radio" @onchange="validityChanged1" name="ValidityDate1" id="ValidityDate2" value="2" checked>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="radio" @onchange="validityChanged1" name="ValidityDate1" id="ValidityDate2" value="2">
                                    }
                                    <label class="form-check-label" for="ValidityDate2">Estimate</label>
                                </div>
                            }
                        </div>
                        @if (isShowDates)
                        {
                            <div class="mb-3">
                                <label>Date of outbreak end</label>
                                <div class="input-group date form-group input-field date-tm">
                                    <MudDatePicker @bind-Date="outbreakDateEnd" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChangeoutBreakEnd" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                </div>
                            </div>
                        }
                        <div class="mb-3 chda-row">
                            @if (isShowDates)
                            {
                                <div class="dseb">
                                    <label class="chda">End Date Validity</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    @if (!string.IsNullOrEmpty(data.ValidityDate3) && data.ValidityDate3.Equals("1"))
                                    {
                                        <input class="form-check-input" type="radio" @onchange="validityChanged3" name="ValidityDate3" id="ValidityDate3" value="1" checked>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="radio" @onchange="validityChanged3" name="ValidityDate3" id="ValidityDate3" value="1">
                                    }
                                    <label class="form-check-label" for="ValidityDate3">Actual</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    @if (!string.IsNullOrEmpty(data.ValidityDate3) && data.ValidityDate3.Equals("2"))
                                    {
                                        <input class="form-check-input" type="radio" @onchange="validityChanged3" name="ValidityDate3" id="ValidityDate33" value="2" checked>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="radio" @onchange="validityChanged3" name="ValidityDate3" id="ValidityDate33" value="2">
                                    }
                                    <label class="form-check-label" for="ValidityDate33">Estimate</label>
                                </div>
                            }
                        </div>
                        @if (isShowDates)
                        {
                            <div class="mb-3">
                                <label>Date of outbreak detection</label>
                                <div class="input-group date form-group input-field date-tm">
                                    <MudDatePicker @bind-Date="outbreakDateDetection" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChangeDetection" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                </div>
                            </div>
                        }
                        <div class="mb-3 chda-row">
                            @if (isShowDates)
                            {
                                <div class="dseb">
                                    <label class="chda">Date Dected Validity</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    @if (!string.IsNullOrEmpty(data.ValidityDate2) && data.ValidityDate2.Equals("1"))
                                    {
                                        <input class="form-check-input" type="radio" name="ValidityDate3d" id="ValidityDate3d" value="1" checked>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="radio" name="ValidityDate3d" id="ValidityDate3d" value="1">
                                    }
                                    <label class="form-check-label" for="ValidityDate3d">Actual</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    @if (!string.IsNullOrEmpty(data.ValidityDate2) && data.ValidityDate2.Equals("2"))
                                    {
                                        <input class="form-check-input" type="radio" name="ValidityDate3d" id="ValidityDate33s" value="2" checked>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="radio" name="ValidityDate3d" id="ValidityDate33s" value="2">
                                    }
                                    <label class="form-check-label" for="ValidityDate33s">Estimate</label>
                                </div>
                            }
                        </div>
                        <div class="mb-3">
                            @if (isShowDates)
                            {
                                <label>Setting </label>
                                <select class="form-select" id="mySelect" @onchange="checkout">
                                    @if (codeSettings1 != null)
                                    {
                                        @foreach (var item in codeSettings1)
                                        {
                                            <option value="@item.setting">@item.setting</option>
                                        }
                                    }

                                </select>
                            }
                            @if (display)
                            {
                                <div id="other-div">
                                    <label>
                                        <input @bind=data.SettingOther id="other-input" placeholder="Setting, Other" />
                                    </label>
                                </div>
                            }
                        </div>
                        <div class="mb-3">
                            <label>Suspected Disease/Event </label>
                            <select @bind=data.DiseaseSuspected class="form-select" aria-label="Disabled select example">
                                <option>-Select-</option>
                                @foreach (var item in codeDisease)
                                {
                                    <option value="@item.Disease"> @item.Disease </option>
                                }
                            </select>
                        </div>
                        @if (ishowdrop)
                        {
                            <div class="mb-3">
                                <label>Secondary Suspected Disease/Event </label>
                                <select @bind=data.DiseaseSuspected1 class="form-select" aria-label="Disabled select example">
                                    <option>-Select-</option>
                                    @foreach (var item in codeDisease)
                                    {
                                        <option value="@item.Disease"> @item.Disease </option>
                                    }
                                </select>
                            </div>
                        }
                        @if (isShowDates)
                        {
                            <div class="mb-3">
                                <label>Number of Initial Cases</label>
                                <input @bind=data.InitialCases type="text" placeholder="" name="Number of Initial Cases">
                            </div>
                        }
                        @if (isShowDates)
                        {
                            <div class="mb-3" style="display:none">
                                <label>Country</label>
                                <select @bind=data.Country class="form-select">
                                    <option value="Select" style="display:inline-block"> Select</option>

                                    @foreach (var item in CountryList)
                                    {
                                        <option value="@item.Name" style="display:inline-block"> @item.Name</option>
                                    }
                                </select>
                            </div>
                        }
                        @if (isShowDates)
                        {
                            <div class="mb-3">
                                <label>City</label>
                                <input type="text" @bind=data.City placeholder="" name="Project Title" style="border-radius: 5px !important">
                            </div>
                        }
                        <div class="mb-3 chda-row">
                            <label class="chda">Is this an international deployment?</label>
                            <div class="form-check">
                                @if (!string.IsNullOrEmpty(data.deployment) && data.deployment.Equals("Yes"))
                                {
                                    <input class="form-check-input" type="radio" name="deployment" id="inlineRadio1" value="Yes" @onchange="RadioButtonChanged" checked>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="deployment" id="inlineRadio1" @onchange="RadioButtonChanged" value="Yes">
                                }
                                <label class="form-check-label" for="inlineRadio1">Yes</label>
                            </div>
                            <div class="form-check ">
                                @if (!string.IsNullOrEmpty(data.deployment) && data.deployment.Equals("No"))
                                {
                                    <input class="form-check-input" type="radio" name="deployment" id="inlineRadio2" @onchange="RadioButtonChanged" value="No" checked>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="deployment" id="inlineRadio2" @onchange="RadioButtonChanged" value="No">
                                }
                                <label class="form-check-label" for="inlineRadio2">No</label>
                            </div>
                            <div class="form-check">
                                @if (!string.IsNullOrEmpty(data.deployment) && data.deployment.Equals("option3"))
                                {
                                    <input class="form-check-input" type="radio" name="deployment" id="inlineRadio3" @onchange="RadioButtonChanged" value="No Reply" checked>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="deployment" id="inlineRadio3" @onchange="RadioButtonChanged" value="No Reply">
                                }
                                <label class="form-check-label" for="inlineRadio3">No Reply</label>
                            </div>
                        </div>
                        @if (showdeployments)
                        {
                            <div class="mb-3">
                                <label>Objective of Deployment</label>
                                <input @bind=data.ObjectiveDeployment type="text" placeholder="">
                            </div>
                            <div class="mb-3">
                                <label>Number of Residents Deployed?</label>
                                <input @bind=data.ResidentsDeployed type="text" placeholder="">
                            </div>
                            <div class="mb-3">
                                <label>Number of Graduates Deployed?</label>
                                <input @bind=data.NumberofGraduatesDeployed type="text" placeholder="">
                            </div>
                        }
                        <div class="mb-3 hiv-cld">
                            <label class="lec">Was HIV status collected for this project?</label><br />
                            <div class="form-check form-check-inline">
                                @if (!string.IsNullOrEmpty(data.HIVStatus) && data.HIVStatus.Equals("1"))
                                {
                                    <input class="form-check-input" type="radio" name="HIVStatus" id="HIVStatusY" value="1" @onchange="RadioButtonChanged1" checked>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="HIVStatus" id="HIVStatusY" @onchange="RadioButtonChanged1" value="1">
                                }
                                <label class="form-check-label" for="HIVStatusY">Yes</label>
                            </div>
                            <div class="form-check form-check-inline">
                                @if (!string.IsNullOrEmpty(data.HIVStatus) && data.HIVStatus.Equals("0"))
                                {
                                    <input class="form-check-input" type="radio" name="HIVStatus" id="HIVStatusN" @onchange="RadioButtonChanged1" value="0" checked>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="HIVStatus" id="HIVStatusN" @onchange="RadioButtonChanged1" value="0">
                                }
                                <label class="form-check-label" for="HIVStatusN">No</label>
                            </div>
                            <div class="form-check form-check-inline">
                                @if (!string.IsNullOrEmpty(data.HIVStatus) && data.HIVStatus.Equals("No Reply"))
                                {
                                    <input class="form-check-input" type="radio" name="HIVStatus" id="HIVStatusR" @onchange="RadioButtonChanged1" value="No Reply" checked>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="HIVStatus" id="HIVStatusR" @onchange="RadioButtonChanged1" value="No Reply">
                                }
                                <label class="form-check-label" for="HIVStatusR">No Reply</label>
                            </div>
                        </div>
                        @if (shownext)
                        {
                            <div class="form-check mb-3 mt-3">
                                <input type="checkbox" class="form-check-input" id="datim" value="option1">
                                <label class="form-check-label" for="datim">If HIV status collected, was this reported?</label>
                            </div>
                        }
                        <div class="mb-3">
                            <label>Date of Outbreak Reporting</label>
                            <div class="input-group date form-group input-field date-tm">
                                <MudDatePicker @bind-Date="reportingDate" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChangeReporting" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                            </div>
                        </div>
                        <div class="mb-3 chda-row">
                            <div class="dseb">
                                <label class="chda">Outbreak Date Validity</label>
                            </div>
                            <div class="form-check form-check-inline">
                                @if (!string.IsNullOrEmpty(data.ValidityDate4) && data.ValidityDate4.Equals("1"))
                                {
                                    <input class="form-check-input" type="radio" name="ValidityDate3s" id="ValidityDate3s" value="1" checked>
                                    <label class="form-check-label" for="ValidityDate3d">Actual</label>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="ValidityDate3s" id="ValidityDate3s" value="1">
                                    <label class="form-check-label" for="ValidityDate3d">Actual</label>
                                }
                            </div>
                            <div class="form-check form-check-inline">
                                @if (!string.IsNullOrEmpty(data.ValidityDate4) && data.ValidityDate4.Equals("2"))
                                {
                                    <input class="form-check-input" type="radio" name="ValidityDate3s" id="ValidityDate33s" value="2" checked>
                                    <label class="form-check-label" for="ValidityDate33s">Estimate</label>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="ValidityDate3s" id="ValidityDate33s" value="2">
                                    <label class="form-check-label" for="ValidityDate33s">Estimate</label>
                                }
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Date of Public Health Response</label>
                            <div class="input-group date form-group input-field date-tm">
                                <MudDatePicker @bind-Date="publicHealth" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChangepublicHealth" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                            </div>
                        </div>
                        <div class="mb-3 chda-row">
                            <div class="dseb">
                                <label class="chda">Public Response Validity</label>
                            </div>
                            <div class="form-check form-check-inline">
                                @if (!string.IsNullOrEmpty(data.ValidityDate5) && data.ValidityDate5.Equals("1"))
                                {
                                    <input class="form-check-input" type="radio" name="ValidityDate33s" id="ValidityDate33s" value="1" checked>
                                    <label class="form-check-label" for="ValidityDate33s">Actual</label>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="ValidityDate33s" id="ValidityDate33s" value="1">
                                    <label class="form-check-label" for="ValidityDate33s">Actual</label>
                                }
                            </div>
                            <div class="form-check form-check-inline">
                                @if (!string.IsNullOrEmpty(data.ValidityDate5) && data.ValidityDate5.Equals("2"))
                                {
                                    <input class="form-check-input" type="radio" name="ValidityDate33s" id="ValidityDate33s" value="2" checked>
                                    <label class="form-check-label" for="ValidityDate33s">Estimate</label>
                                }
                                else
                                {
                                    <input class="form-check-input" type="radio" name="ValidityDate33s" id="ValidityDate33s" value="2">
                                    <label class="form-check-label" for="ValidityDate33s">Estimate</label>
                                }
                            </div>
                        </div>


                        <div class="mb-3 chda-row">
                            <label class="chda">Did you need to travel away from your field assignment?</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" @onchange="CheckboxChanged1" name="travelfromfield" id="inlineRadio1" value="Yes (International)">
                                <label class="form-check-label" for="inlineRadio1">Yes (International)</label>
                            </div>
                            <div class="form-check ">
                                <input class="form-check-input" type="radio" @onchange="CheckboxChanged1" name="travelfromfield" id="inlineRadio2" value="Yes (Domestic)">
                                <label class="form-check-label" for="inlineRadio2">Yes (Domestic)</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" @onchange="CheckboxChanged1" name="travelfromfield" id="inlineRadio3" value="No">
                                <label class="form-check-label" for="inlineRadio3">No</label>
                            </div>
                        </div>

                        @if (showtextbox)
                        {
                            <div id="other-div">
                                <label>
                                    <input @bind=data.DaysinField id="other-input" placeholder="Approximate number of days in the field" />
                                </label>
                            </div>
                        }

                    </div>

                    <!-- step three -->
                    <div class="step step3">
                        <div class="min-tltl">Project Activity (Continued)</div>
                        <div class="row">

                            <div class="guida-hed">
                                <h3>
                                    Disease Notification
                                </h3>
                            </div>

                            <div class="mb-3 hiv-cld">
                                <label class="lec">How was the disease identified?</label>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="datim" value="option1">
                                    <label class="form-check-label" for="datim">Routine surveillance</label>
                                </div>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="sqa" value="option2">
                                    <label class="form-check-label" for="sqa">Mas media: newspaper, TV, Radio</label>
                                </div>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="ea" value="option3">
                                    <label class="form-check-label" for="ea">Rumors</label>
                                </div>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="sims" value="option1">
                                    <label class="form-check-label" for="sims">Clinician reports nurses, physicians</label>
                                </div>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="mig" value="option2">
                                    <label class="form-check-label" for="mig">Other Specify</label>
                                </div>
                            </div>
                            <div class="guida-hed">
                                <h3>
                                    One Health
                                </h3>
                            </div>

                            <div class="mb-3">
                                <label>Was the outbreak investigation or response investigating humans only, animals only, or humans and animals? (Please select one)</label>
                                <select @bind="@data.ONEHealth1" class="form-select">
                                    <option>-Select-</option>
                                    @if (oneHealth11 != null)
                                    {
                                        @foreach (var @item in oneHealth11)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }
                                </select>
                            </div>


                            <div class="mb-3">
                                <label>Did the project include any activities that involved a One Health (animal-human-environment interface) approach? (Please select one)</label>
                                <select @bind="@data.ONEHealth2" class="form-select">
                                    <option>-Select-</option>
                                    @if (oneHealth21 != null)
                                    {
                                        @foreach (var @item in oneHealth21)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }

                                </select>
                            </div>

                            <div class="donnair">
                                <div class="ojec-head">
                                    <h5>Population Demographics: Age</h5>
                                </div>
                                <div class="mb-3 hiv-cld">
                                    <label>Was the outbreak investigation or response investigating humans only, animals only, or humans and animals? (Please select one)</label>
                                    <div class="form-check">
                                        <input @bind=data.Children5 type="checkbox" class="form-check-input" id="children">
                                        <label class="form-check-label" for="children">Children &lt;5 </label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.Children511 type="checkbox" class="form-check-input" id="childrey">
                                        <label class="form-check-label" for="childrey">Children 5-11 years</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.Children1219 type="checkbox" class="form-check-input" id="adoles">
                                        <label class="form-check-label" for="adoles">Adolescents (12 - 19 years)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.Children2060 type="checkbox" class="form-check-input" id="adults">
                                        <label class="form-check-label" for="adults">Adults (20 - 60 years)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.Children61 type="checkbox" class="form-check-input" id="elderly">
                                        <label class="form-check-label" for="elderly">Elderly (61+ years)</label>
                                    </div>
                                </div>
                            </div>
                            <div class="donnair">
                                <div class="ojec-head">
                                    <h5>Population Demographics: Gender</h5>
                                </div>
                                <div class="mb-3 hiv-cld">
                                    <label>Please select the gender that applies to the majority of this project population. (Check all that apply).</label>
                                    <div class="form-check">
                                        <input @bind=data.Male type="checkbox" class="form-check-input" id="male">
                                        <label class="form-check-label" for="male">Male </label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.Female type="checkbox" class="form-check-input" id="female">
                                        <label class="form-check-label" for="female">Female</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.FtoM type="checkbox" class="form-check-input" id="transgenderFema">
                                        <label class="form-check-label" for="transgenderFema">Transgender: Female to Male</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.MtoF type="checkbox" class="form-check-input" id="transgenderm">
                                        <label class="form-check-label" for="transgenderm">Transgender: Male to Female</label>
                                    </div>
                                </div>
                            </div>
                            <div class="guida-hed">
                                <h3>
                                    Special Questions for PEPFAR Funded FETPs and Projects
                                </h3>
                            </div>
                            <div class="mb-3 chda-row">
                                <label class="chda">Is Project PEPFAR?</label>
                                <div class="form-check">
                                    @if (!string.IsNullOrEmpty(data.ProjHIVMonitoring) && data.ProjHIVMonitoring.Equals("Yes"))
                                    {
                                        <input class="form-check-input" checked type="radio" @onchange="CheckboxChangedPep" name="Pep" id="inlineRadio1" value="Yes">
                                        <label class="form-check-label" for="inlineRadio1">Yes</label>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="radio" @onchange="CheckboxChangedPep" name="Pep" id="inlineRadio1" value="Yes">
                                        <label class="form-check-label" for="inlineRadio1">Yes</label>
                                    }
                                </div>

                                <div class="form-check">
                                    @if (!string.IsNullOrEmpty(data.ProjHIVMonitoring) && data.ProjHIVMonitoring.Equals("No"))
                                    {
                                        <input class="form-check-input" checked type="radio" @onchange="CheckboxChangedPep" name="Pep" id="inlineRadio3" value="No">
                                        <label class="form-check-label" for="inlineRadio3">No</label>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="radio" @onchange="CheckboxChangedPep" name="Pep" id="inlineRadio3" value="No">
                                        <label class="form-check-label" for="inlineRadio3">No</label>
                                    }
                                </div>
                            </div>
                            @if (showtextboxPep)
                            {
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Antiretroviral Therapy (ART)</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.ART) && data.ART.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="ART" id="inlineRadioart" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="ART" id="inlineRadioart" value="1">
                                        }
                                        <label class="form-check-label" for="inlineRadioart">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.ART) && data.ART.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="ART" id="inlineRadioart" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="ART" id="inlineRadioart" value="0">
                                        }
                                        <label class="form-check-label" for="inlineRadioartn">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.ART) && data.ART.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="ART" id="inlineRadioart" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="ART" id="inlineRadioart" value="2">
                                        }
                                        <label class="form-check-label" for="inlineRadioarty">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Prevention of Mother-to-Child Transmission (PMTCT)</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.PMTCT) && data.PMTCT.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="PMTCT" id="inlineRadioarts" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="PMTCT" id="inlineRadioarts" value="1">
                                        }
                                        <label class="form-check-label" for="inlineRadioarts">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.PMTCT) && data.PMTCT.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="PMTCT" id="inlineRadioan" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="PMTCT" id="inlineRadioan" value="0">
                                        }
                                        <label class="form-check-label" for="inlineRadioan">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.PMTCT) && data.PMTCT.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="PMTCT" id="inlineRadity" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="PMTCT" id="inlineRadity" value="2">
                                        }
                                        <label class="form-check-label" for="inlineRadity">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Tuberculosis/Human Immunodeficiency Virus (TB/HIV)</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.TBHIV) && data.TBHIV.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="TBHIV" id="inlineRadioarthv" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="TBHIV" id="inlineRadioarthv" value="1">
                                        }
                                        <label class="form-check-label" for="inlineRadioarthv">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.TBHIV) && data.TBHIV.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="TBHIV" id="inlineRadioarthv1" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="TBHIV" id="inlineRadioarthv1" value="0">
                                        }
                                        <label class="form-check-label" for="inlineRadioarthv1">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.TBHIV) && data.TBHIV.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="TBHIV" id="inlineRadioarthvw" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="TBHIV" id="inlineRadioarthvw" value="2">
                                        }
                                        <label class="form-check-label" for="inlineRadioarthvw">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Key Populations</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.KeyPopulations) && data.KeyPopulations.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="KeyPopulations" id="inlineRadioarla" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="KeyPopulations" id="inlineRadioarla" value="1">
                                        }
                                        <label class="form-check-label" for="inlineRadioarla">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.KeyPopulations) && data.KeyPopulations.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="KeyPopulations" id="inlineRadioarlan" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="KeyPopulations" id="inlineRadioarlan" value="0">
                                        }
                                        <label class="form-check-label" for="inlineRadioarlan">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.KeyPopulations) && data.KeyPopulations.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="KeyPopulations" id="inlineRadioarlae" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="KeyPopulations" id="inlineRadioarlae" value="2">
                                        }
                                        <label class="form-check-label" for="inlineRadioarlae">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 hiv-cld">
                                    <label class="lec">If yes (Key Populations), please specify all that apply</label>
                                    <div class="form-check">
                                        <input @bind=data.PWID type="checkbox" class="form-check-input" id="pwid" value="option1">
                                        <label class="form-check-label" for="pwid">(PWID)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.MSM type="checkbox" class="form-check-input" id="msm" value="option2">
                                        <label class="form-check-label" for="msm">(MSM)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.FSW type="checkbox" class="form-check-input" id="fsw" value="option3">
                                        <label class="form-check-label" for="fsw">(FSW)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.Transgender type="checkbox" class="form-check-input" id="transgender" value="option1">
                                        <label class="form-check-label" for="transgender">Transgender</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.Migrants type="checkbox" class="form-check-input" id="migrants" value="option2">
                                        <label class="form-check-label" for="migrants">Migrants</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.Prisoners type="checkbox" class="form-check-input" id="prisoners" value="option3">
                                        <label class="form-check-label" for="prisoners">Prisoners</label>
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Did this project support PEPFAR Oversight</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.PEPFAROversight) && data.PEPFAROversight.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="PEPFAROversight" id="pepfr" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="PEPFAROversight" id="pepfr" value="1">
                                        }
                                        <label class="form-check-label" for="pepfr">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.PEPFAROversight) && data.PEPFAROversight.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="PEPFAROversight" id="pepfrs" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="PEPFAROversight" id="pepfrs" value="0">
                                        }
                                        <label class="form-check-label" for="pepfrs">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.PEPFAROversight) && data.PEPFAROversight.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="PEPFAROversight" id="pepfrr" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="PEPFAROversight" id="pepfrr" value="2">
                                        }
                                        <label class="form-check-label" for="pepfrr">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 hiv-cld">
                                    <label class="lec">If Yes, then select the type of PEPFAR monitoring used. Select All that apply</label>
                                    <div class="form-check">
                                        <input @bind=data.DATIM type="checkbox" class="form-check-input" id="datim" value="option1">
                                        <label class="form-check-label" for="datim">Data for Accountability, Transparency, and Impact (DATIM)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.DQASQA type="checkbox" class="form-check-input" id="sqa" value="option2">
                                        <label class="form-check-label" for="sqa">Data or Service Quality Assessment (DQA/SQA)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.EA type="checkbox" class="form-check-input" id="ea" value="option3">
                                        <label class="form-check-label" for="ea">Expenditure Analysis (EA)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.SIMS type="checkbox" class="form-check-input" id="sims" value="option1">
                                        <label class="form-check-label" for="sims">Site Improvement through Monitoring Systems (SIMS)</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.PEPFARMigrants type="checkbox" class="form-check-input" id="mig" value="option2">
                                        <label class="form-check-label" for="mig">Migrants</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.PEPFARMonitoring type="checkbox" class="form-check-input" id="mont" value="option3">
                                        <label class="form-check-label" for="mont">Other PEPFAR Monitoring</label>
                                    </div>
                                    <div class="form-check">
                                        <input @bind=data.PEPFARNoReply type="checkbox" class="form-check-input" id="rep" value="option3">
                                        <label class="form-check-label" for="rep">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Was this project in response to a data request?</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.ResponseToDatRequest) && data.ResponseToDatRequest.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="ResponseToDatRequest" id="reqa" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="ResponseToDatRequest" id="reqa" value="1">
                                        }
                                        <label class="form-check-label" for="reqa">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.ResponseToDatRequest) && data.ResponseToDatRequest.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="ResponseToDatRequest" id="reqas" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="ResponseToDatRequest" id="reqas" value="0">
                                        }
                                        <label class="form-check-label" for="reqas">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.ResponseToDatRequest) && data.ResponseToDatRequest.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="ResponseToDatRequest" id="reqay" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="ResponseToDatRequest" id="reqay" value="2">
                                        }
                                        <label class="form-check-label" for="reqay">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Was this project related to {add ay population}?</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.AddAyPopulation) && data.AddAyPopulation.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="AddAyPopulation" id="addy" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="AddAyPopulation" id="addy" value="1">
                                        }
                                        <label class="form-check-label" for="addy">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.AddAyPopulation) && data.AddAyPopulation.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="AddAyPopulation" id="addys" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="AddAyPopulation" id="addys" value="0">
                                        }
                                        <label class="form-check-label" for="addys">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.AddAyPopulation) && data.AddAyPopulation.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="AddAyPopulation" id="addysy" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="AddAyPopulation" id="addysy" value="2">
                                        }
                                        <label class="form-check-label" for="addysy">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Was this project related to finding {add population}?</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.AddPopulation) && data.AddPopulation.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="AddPopulation" id="indis" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="AddPopulation" id="indis" value="1">
                                        }
                                        <label class="form-check-label" for="indis">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.AddPopulation) && data.AddPopulation.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="AddPopulation" id="indiss" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="AddPopulation" id="indiss" value="0">
                                        }
                                        <label class="form-check-label" for="indiss">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.AddPopulation) && data.AddPopulation.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="AddPopulation" id="indisy" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="AddPopulation" id="indisy" value="2">
                                        }
                                        <label class="form-check-label" for="indisy">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label class="lec">Was this project related to stigma and/or discrimination?</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.Stigma) && data.Stigma.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="Stigma" id="discr" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="Stigma" id="discr" value="1">
                                        }
                                        <label class="form-check-label" for="discr">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.Stigma) && data.Stigma.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="Stigma" id="discrs" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="Stigma" id="discrs" value="0">
                                        }
                                        <label class="form-check-label" for="discrs">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.Stigma) && data.Stigma.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="Stigma" id="discry" value="2" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="Stigma" id="discry" value="2">
                                        }
                                        <label class="form-check-label" for="discry">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>In What SNU did this project take place?</label>
                                    <select @bind=data.Dropdown class="form-select">
                                        <option>-Select-</option>
                                        <option>First Choice</option>
                                        <option>Second Choice</option>
                                        <option>Third Choice</option>
                                    </select>
                                </div>
                            }



                        </div>
                    </div>

                    <!-- step Four -->
                    <div class="step step4">
                        <div class="min-tltl">Final Outcome and Analysis</div>
                        <div class="row staps-desl">

                            <div class="donnair">
                                <div class="ojec-head">
                                    <h5>Final Outcome</h5>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label>Are there questionnaires or other data collection instruments for this project?</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.FinalOutcome) && data.FinalOutcome.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="FinalOutcome" id="trum" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="FinalOutcome" id="trum" value="1">
                                        }
                                        <label class="form-check-label" for="trum">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.FinalOutcome) && data.FinalOutcome.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="FinalOutcome" id="trumn" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="FinalOutcome" id="trumn" value="0">
                                        }
                                        <label class="form-check-label" for="trumn">No</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.FinalOutcome) && data.FinalOutcome.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="FinalOutcome" id="trumy" value="3" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="FinalOutcome" id="trumy" value="3">
                                        }
                                        <label class="form-check-label" for="trumy">No Reply</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Date Initial findings and recommendations first reported to stakeholders</label>
                                    <div class="input-group date form-group input-field date-tm">
                                        <MudDatePicker @bind-Date="DateInitialFindings" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChange" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                    </div>
                                </div>
                                <div class="mb-3 chda-row antr">
                                    <label>Is written document available?</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.WrittenDocumentAvailable) && data.WrittenDocumentAvailable.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="WrittenDocumentAvailable" id="rit" value="1" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="WrittenDocumentAvailable" id="rit" value="1">
                                        }
                                        <label class="form-check-label" for="rit">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.WrittenDocumentAvailable) && data.WrittenDocumentAvailable.Equals("0"))
                                        {
                                            <input class="form-check-input" type="radio" name="WrittenDocumentAvailable" id="labl" value="0" checked>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="WrittenDocumentAvailable" id="labl" value="0">
                                        }
                                        <label class="form-check-label" for="labl">No</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Date of First Public Communications</label>
                                    <div class="input-group date form-group input-field date-tm">
                                        <MudDatePicker @bind-Date="firstPublished" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChange" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                    </div>
                                </div>
                            </div>
                            <!--[Final Analysis]-->
                            <div class="donnair">
                                <div class="ojec-head">
                                    <h5>Final Analysis</h5>
                                </div>

                                <div class="col-fl mb-3">
                                    <label>Final Disease</label>
                                    <select class="form-select" @bind="@data.DiseaseFinal" aria-label="Disabled select example">
                                        <option>-Select-</option>

                                        @foreach (var item in codeDisease)
                                        {
                                            <option value="@item.Disease"> @item.Disease </option>
                                        }
                                    </select>
                                </div>

                                <div class="col-fl mb-3">
                                    <label>Final Number Affected</label>
                                    <input type="text" @bind="@data.FinalNumberAffect" placeholder="" name="">
                                </div>

                                <div class="col-fl mb-3">
                                    <label>Exposure/Mode of Transmission</label>
                                    <select class="form-select" aria-label="Disabled select example">
                                        @if (codeexposure1 != null)
                                        {
                                            @foreach (var item in codeexposure1)
                                            {
                                                <option value="@item.exposure">@item.exposure</option>
                                            }
                                        }
                                    </select>
                                </div>

                                <div class="col-fl mb-3">
                                    <label>Date of Laboratory Confirmation</label>
                                    <div class="input-group date form-group input-field date-tm">
                                        <MudDatePicker @bind-Date="LaboratoryConfirmation" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChange" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                    </div>
                                </div>

                                <div class="col-fl chda-row antr mb-3">
                                    <label>Date Validity</label>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.ValidityDate6) && data.ValidityDate6.Equals("1"))
                                        {
                                            <input class="form-check-input" type="radio" name="valid" id="actual" value="1" checked>
                                            <label class="form-check-label" for="actual">Actual</label>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="valid" id="actual" value="1">
                                            <label class="form-check-label" for="actual">Actual</label>
                                        }
                                    </div>
                                    <div class="form-check">
                                        @if (!string.IsNullOrEmpty(data.ValidityDate6) && data.ValidityDate6.Equals("2"))
                                        {
                                            <input class="form-check-input" type="radio" name="valid" id="estimate" value="2" checked>
                                            <label class="form-check-label" for="estimate">Estimate</label>
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="radio" name="valid" id="estimate" value="2">
                                            <label class="form-check-label" for="estimate">Estimate</label>
                                        }
                                    </div>
                                </div>

                            </div>

                            <!--[End Final Analysis]-->
                            <div class="donnair">
                                <div class="ojec-head">
                                    <h5>End date of activity</h5>
                                </div>
                                <div class="mb-3">
                                    <label>(Office Use only)</label>
                                    <div class="input-group date form-group input-field date-tm">
                                        <MudDatePicker @bind-Date="EndDateofActivity" Placeholder="dd/mm/yyyy" PickerClosed="OnDateChange" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="lonh-modl">
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop"> Review Your Entries </button>
                        </div>
                        <div class="form-footer">
                            @* @if (isShowSubmit)
                            {*@
                            @if (!submitshow)
                            {
                                <button type="button" style="float:right" @onclick=SaveData>Submit </button>
                            }
                            else
                            {
                                <button style="float:right" type="button">Submitting... </button>
                            }


                            @* }*@
                        </div>
                    </div>

                    <!-- step Four -->
                    <!--<div class="step step5">
                      <div  class="min-tltl">{Page 5: Title TBD}</div>
                      <div class="lonh-modl">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop"> Review Your Entries </button>
                      </div>
                    </div>-->
                    <!-- start previous / next buttons -->
                    <div class="form-footer d-flex">
                        <button type="button" id="prevBtn1" onclick="nextPrev(-1)">Previous</button>
                        @* @if (isShowSubmit)
                        {*@
                        @* @if (!submitshow)
                        {
                        <button type="button" @onclick=SaveData>Submit </button>
                        }
                        else
                        {
                        <button type="button">Submitting... </button>
                        }*@


                        @* }*@
                        <button type="button" id="nextBtn1" onclick="nextPrev(1)">Next</button>
                    </div>
                    <!-- end previous / next buttons -->
                    <!--[Start Analysis pop]-->
                    <div class="modal fade" id="analysis" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                        <div class="modal-dialog smrydd">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="staticBackdropLabel">Disease Report</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>

                            </div>
                        </div>
                    </div>
                    <!--[End Analysis pop]-->
                    <!-- Modal -->
                    <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                        <div class="modal-dialog smrydd">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="staticBackdropLabel">Form Summary</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="form-smry">
                                        <div class="proje-dtl">
                                            <h5>Initial Project Data</h5>
                                            <table class="table">
                                                <tbody>
                                                    <tr>
                                                        <td>Project Status TBD</td>
                                                        <td>@data.FETP</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Project Classification <sup>*</sup></td>
                                                        <td>@data.ProjectClassification</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Project Type <sup>*</sup></td>
                                                        <td>@data.Type</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Date Project Assigned <sup>*</sup></td>
                                                        <td> @assignedDate </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Project Title <sup>*</sup></td>
                                                        <td>@data.projecttitle</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Lead Resident </td>
                                                        <td>@data.LeadResident </td>
                                                    </tr>
                                                    <tr>
                                                        <td colspan="2">
                                                            <div class="tnm">Team Members</div>
                                                            <div class="tnm-etr">No entry</div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Show All Residents (Current and Post Graduate) </td>
                                                        <td>false </td>
                                                    </tr>
                                                    <tr>
                                                        <td colspan="2"><div class="tnm-etr">No entry</div></td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="proje-dtl">
                                            <h5>Outbreak Investigation</h5>
                                            <table class="table">
                                                <tbody>
                                                    <tr>
                                                        <td>Date of Outbreak Start</td>
                                                        <td> @outbreakDate</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Date of Outbreak End </td>
                                                        <td>@outbreakDateEnd</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Date of Outbreak Detection </td>
                                                        <td>@outbreakDateDetection</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Date Validity </td>
                                                        <td>
                                                            <div class="nx-recod">
                                                                <div class="nx-rn">
                                                                    <div class="nx-rtl">Date of Outbreak Start</div>
                                                                    @if (data.ValidityDate1 == "1")
                                                                    {
                                                                        <div class="nxr-re">Actual</div>
                                                                    }
                                                                    else if (data.ValidityDate1 == "2")
                                                                    {
                                                                        <div class="nxr-re">Estimated</div>

                                                                    }
                                                                </div>
                                                                <div class="nx-rn">
                                                                    <div class="nx-rtl">Date of Outbreak End</div>
                                                                    @if (data.ValidityDate3 == "1")
                                                                    {
                                                                        <div class="nxr-re">Actual</div>
                                                                    }
                                                                    else if (data.ValidityDate3 == "2")
                                                                    {
                                                                        <div class="nxr-re">Estimated</div>

                                                                    }
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="proje-dtl">
                                            <h5>Project Activity</h5>
                                            <table class="table">
                                                <tbody>
                                                    <tr>
                                                        <td>Was the outbreak investigation or response investigating humans only, animals only, or humans and animals?</td>
                                                        <td> @data.ONEHealth1</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Did the project include any activities that involved a One Health</td>
                                                        <td>@data.ONEHealth2</td>
                                                    </tr>
                                                    <tr>
                                                        <td>gender that applies to the majority of this project population. </td>
                                                        <td>
                                                            <div class="nx-recod">
                                                                <div class="nx-rn">
                                                                    <div class="nx-rtl">Male</div>
                                                                    @if (data.Male)
                                                                    {
                                                                        <div class="nxr-re">True</div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="nxr-re">False</div>

                                                                    }
                                                                </div>
                                                                <div class="nx-rn">
                                                                    <div class="nx-rtl">Female</div>
                                                                    @if (data.Female)
                                                                    {
                                                                        <div class="nxr-re">True</div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="nxr-re">False</div>

                                                                    }
                                                                </div>
                                                                <div class="nx-rn">
                                                                    <div class="nx-rtl">Transgender: Female to Male</div>
                                                                    @if (data.FtoM)
                                                                    {
                                                                        <div class="nxr-re">True</div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="nxr-re">False</div>

                                                                    }
                                                                </div>
                                                                <div class="nx-rn">
                                                                    <div class="nx-rtl">Transgender: Male to Female:</div>
                                                                    @if (data.MtoF)
                                                                    {
                                                                        <div class="nxr-re">True</div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="nxr-re">False</div>

                                                                    }
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Is the Project PEPFAR </td>
                                                        <td>
                                                            <div class="nx-recod">
                                                                <div class="nx-rn">
                                                                    @if (showtextboxPep)
                                                                    {
                                                                        <div class="nxr-re">Yes</div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="nxr-re">No</div>

                                                                    }
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>

                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="proje-dtl">
                                            <h5>Final Outcome and Analysis</h5>
                                            <table class="table">
                                                <tbody>
                                                    <tr>
                                                        <td> Date Initial findings and recommendations first reported to stakeholders</td>
                                                        <td>@DateInitialFindings </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Date of First Public Communications</td>
                                                        <td>@firstPublished </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Final Disease</td>
                                                        <td>@data.DiseaseFinal </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Final Number Affected</td>
                                                        <td>@data.FinalNumberAffect </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                        <div class="modal-dialog smrydd">
                            <div class="modal-content">
                                <div class="modal-header ssif">
                                    <h2 class="" style="font-weight: bolder;font-size: 24px !important;" id="staticBackdropLabel">Umbrella Protocol</h2>
                                    <button type="button" class="btn-close" @onclick="() => Cancel()" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="row-aps">
                                    @* @if (!hideon20)
                                    {*@
                                    <div class="col-fl">
                                        <label>Description of the problem <sup style="color:red">*</sup></label>
                                        <MudTextField T="string" @bind-Value="@data.problemDescription" Variant="Variant.Outlined" Lines="3" />
                                    </div>
                                    @* }*@

                                    @* @if (!hideon20)
                                    {*@
                                    <div class="col-fl">
                                        <label>Investigation team composition <sup style="color:red">*</sup></label>
                                        <MudTextField T="string" @bind-Value="@data.TeamComposition" Variant="Variant.Outlined" Lines="3" />
                                    </div>
                                    @* }*@
                                    <div class="col-fl">
                                        <label>Objectives of the investigation <sup style="color:red">*</sup></label>
                                        <MudTextField T="string" @bind-Value="@data.InvestivationObjective" Variant="Variant.Outlined" Lines="3" />
                                    </div>
                                    @* @if (!hideon10)
                                    {*@
                                    <div class="col-fl">
                                        <label>What is the public health activity, program, or policy that this project supports? <sup style="color:red">*</sup></label>
                                        <MudTextField T="string" @bind-Value="@data.ProjectSupporting" Variant="Variant.Outlined" Lines="3" />
                                    </div>
                                    @*}*@
                                    <div class="col-fl   antr cime">
                                        <label class="str">What type of data will be collected? <sup style="color:red">*</sup></label>
                                        <div class="form-check">

                                            <input name="dataCollected" @bind="@data.DataSpecimensCollected" class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                                            <label class="form-check-label" for="flexCheckDefault"> Data or specimens collected from individuals </label>

                                        </div>
                                        <div class="form-check">
                                            <input name="dataCollected" @bind="@data.FocusGroupDataCollected" class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                                            <label class="form-check-label" for="flexCheckChecked"> Data collected from focus groups or other groups of individuals </label>
                                        </div>
                                        <div class="form-check">
                                            <input name="dataCollected" @bind="@data.DataFromRoutineSurveillance" class="form-check-input" type="checkbox" value="" id="865">
                                            <label class="form-check-label" for="865"> Data from routine surveillance or public health activities about individuals </label>
                                        </div>
                                        <div class="form-check">
                                            <input name="dataCollected" @bind="@data.AdministrativeInformation" class="form-check-input" type="checkbox" value="" id="866">
                                            <label class="form-check-label" for="866"> Administrative information on public health activities </label>
                                        </div>
                                        <div class="form-check">
                                            <input name="dataCollected" @bind="@data.DataHealthFacilities" class="form-check-input" type="checkbox" value="" id="867">
                                            <label class="form-check-label" for="867"> Data on health facilities, programs, or units (NOT persons) </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" @bind="@data.DataUnlinkedAnonymous" type="checkbox" value="" id="868">
                                            <label class="form-check-label" for="868"> Unlinked or anonymous individual data or specimens collected for another purpose </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" @bind="@data.DataDeceasedPersons" type="checkbox" value="" id="869">
                                            <label class="form-check-label" for="869"> Data or specimens from deceased persons </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" @bind="@data.DataVertebrateAnimals" type="checkbox" value="" id="870">
                                            <label class="form-check-label" for="870"> Data or specimens from vertebrate animals </label>
                                        </div>

                                    </div>
                                    @* @if (!hideon20)
                                    {*@
                                    <div class="col-fl">
                                        <label>Anticipated scope of the investigation <sup style="color:red">*</sup></label>
                                        <MudTextField T="string" @bind-Value="@data.AnticipatedScope" Variant="Variant.Outlined" Lines="3" />
                                    </div>
                                    @*}*@
                                    <div class="col-fl">
                                        <label>To what groups will the findings and recommendations be reported? <sup style="color:red">*</sup></label>
                                        <MudTextField T="string" @bind-Value="@data.ReportingRecommendations" Variant="Variant.Outlined" Lines="3" />
                                    </div>
                                    @*@if (!hideon10)
                                    {*@
                                    <div class="col-fl">
                                        <label>How will the results of this project improve the specific public health activity? <sup style="color:red">*</sup></label>
                                        <MudTextField T="string" @bind-Value="@data.ImprovementDescription" Variant="Variant.Outlined" Lines="3" />
                                    </div>
                                    @* }*@
                                    @if (Role == "Non-Resident")
                                    {
                                        <h8 style="font-size: large">Research or Non-Research:</h8>
                                        <div class="ojec-head" style="border: inset; padding: 15px; color:black">

                                            <p>
                                                Public health practice involves gathering information to solve problems relevant to the people from whom the information is collected and includes activities such as outbreak investigations,
                                                surveillance activities, program monitoring and evaluation and is considered non-research.  Human subjects research involves collecting information from humans that is used to generate new knowledge that can be generalized to a wider population.
                                            </p>
                                        </div>
                                    }


                                    <div class="mb-3 chda-row" style="padding-top: 15px">
                                        @if (Role == "Non-Resident")
                                        {
                                            <label class="chda">Is your project research or non-research??</label>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="deployment" id="inlineRadio1" value="Research">
                                                <label class="form-check-label" for="inlineRadio1">Research</label>
                                            </div>
                                            <div class="form-check ">
                                                <input class="form-check-input" type="radio" name="deployment" id="inlineRadio2" value=" Non-Research">
                                                <label class="form-check-label" for="inlineRadio2">
                                                    Non-Research
                                                </label>
                                            </div>

                                            <div class="mb-3">
                                                <label>Please provide details for why you selected Research or Non-Research? <sup>*</sup> </label>
                                                <MudTextField T="string" @bind-Value="@data.Research_orNon" Variant="Variant.Outlined" Lines="3" />
                                            </div>
                                            <div class="mb-3">
                                                <label>Select the target population(s) included/represented</label>
                                                <select class="form-select" @bind=@data.TargetPopulation>
                                                    <option>Select</option>
                                                    @if (TargetPopulation1 != null)
                                                    {
                                                        @foreach (var @item in TargetPopulation1)
                                                        {
                                                            <option value="@item.codetarget">@item.codetarget</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                            <div class="mb-3">
                                                <label>Select the CDC’s role</label>
                                                <select class="form-select" @bind=@data.CDCRole>
                                                    <option>Select</option>
                                                    @if (codeCdcRoles != null)
                                                    {
                                                        @foreach (var @item in codeCdcRoles)
                                                        {
                                                            <option value="@item.cdcrole">@item.cdcrole</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        }


                                    </div>

                                    <div class="add-pad">
                                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => Close()" data-bs-target="#um-protocol">Done </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
</div>
<footer class="footer-wrap">
    <div class="footer-inner">
        <a @onclick=GoPrevPage class="footer-link active">
            <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M10.9525 20.5769V17.7619C10.9525 17.0433 11.5393 16.4608 12.2631 16.4608H14.9092C15.2568 16.4608 15.5901 16.5979 15.8359 16.8419C16.0817 17.0859 16.2198 17.4168 16.2198 17.7619V20.5769C16.2176 20.8757 16.3356 21.1629 16.5476 21.375C16.7597 21.587 17.0482 21.7062 17.3491 21.7062H19.1543C19.9974 21.7084 20.8068 21.3774 21.4037 20.7863C22.0007 20.1953 22.3362 19.3927 22.3362 18.5557V10.5362C22.3362 9.86009 22.0343 9.21877 21.5119 8.78499L15.3708 3.91601C14.3025 3.06231 12.7719 3.08988 11.7356 3.98148L5.73461 8.78499C5.18751 9.20598 4.86052 9.8492 4.84436 10.5362V18.5475C4.84436 20.292 6.26891 21.7062 8.02619 21.7062H9.7902C10.4152 21.7062 10.9232 21.2056 10.9277 20.5851L10.9525 20.5769Z" fill="#D0D0D0" />
            </svg>
            <p>Home</p>
        </a>
        @if (program == 1)
        {
            <a href="/add_project_step_1" class="footer-link">
                <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M14.4189 3.47566C14.4189 3.23918 14.2316 3.04053 13.988 3.04053H8.98668C6.65458 3.04053 4.76268 4.96081 4.76268 7.30677V17.5041C4.76268 19.9636 6.74824 21.9596 9.18336 21.9596H16.6386C18.9613 21.9596 20.8439 20.0582 20.8439 17.7122V10.1068C20.8439 9.8703 20.6565 9.68111 20.4224 9.68111C20.2046 9.68111 19.9649 9.68387 19.7447 9.68641C19.6257 9.68779 19.5123 9.6891 19.4112 9.68986L19.2517 9.69057C19.0631 9.69057 18.8495 9.68875 18.6092 9.68672C18.3004 9.6841 17.9474 9.68111 17.5471 9.68111C15.8331 9.67165 14.4189 8.25272 14.4189 6.52163V3.47566ZM16.5535 3.58161C16.2735 3.28742 15.7837 3.48985 15.7837 3.89756V6.39109C15.7837 7.43731 16.6369 8.29907 17.6728 8.29907C18.3256 8.30569 19.2331 8.30853 20.003 8.30569C20.3973 8.30475 20.5977 7.82893 20.3242 7.54231C19.8309 7.02425 19.1435 6.30216 18.4527 5.57651C17.7586 4.84732 17.061 4.11453 16.5535 3.58161Z" fill="#D0D0D0" />
                    <path d="M12.8033 17.3393V10.7802" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M9.52373 14.0597H16.0828" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <p>Add Project</p>
            </a>
            <a href="/Projects" class="footer-link">
                <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M13.9881 3.04053C14.2316 3.04053 14.4189 3.23918 14.4189 3.47566V6.52163C14.4189 8.25272 15.8331 9.67165 17.5471 9.68111C18.2589 9.68111 18.8208 9.69057 19.2517 9.69057L19.4112 9.68986C19.6992 9.68767 20.0868 9.68111 20.4224 9.68111C20.6566 9.68111 20.8439 9.8703 20.8439 10.1068V17.7122C20.8439 20.0582 18.9613 21.9596 16.6386 21.9596H9.18338C6.74826 21.9596 4.7627 19.9636 4.7627 17.5041V7.30677C4.7627 4.96081 6.6546 3.04053 8.9867 3.04053H13.9881ZM14.9902 15.2433H9.89518C9.51118 15.2433 9.19275 15.5555 9.19275 15.9433C9.19275 16.3311 9.51118 16.6528 9.89518 16.6528H14.9902C15.3742 16.6528 15.6926 16.3311 15.6926 15.9433C15.6926 15.5555 15.3742 15.2433 14.9902 15.2433ZM13.0608 10.5135H9.89518C9.51118 10.5135 9.19275 10.8352 9.19275 11.223C9.19275 11.6108 9.51118 11.923 9.89518 11.923H13.0608C13.4448 11.923 13.7633 11.6108 13.7633 11.223C13.7633 10.8352 13.4448 10.5135 13.0608 10.5135ZM15.7837 3.89756C15.7837 3.48985 16.2735 3.28742 16.5536 3.58161C17.566 4.64486 19.3352 6.50365 20.3243 7.54231C20.5977 7.82893 20.3973 8.30475 20.003 8.30569C19.2331 8.30853 18.3256 8.30569 17.6728 8.29907C16.6369 8.29907 15.7837 7.43731 15.7837 6.39109V3.89756Z" fill="#D0D0D0" />
                </svg>
                <p>Projects</p>
            </a>
        }
        else if (program == 2)
        {
            <a href="/AddIntermediateResident" class="footer-link">
                <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M14.4189 3.47566C14.4189 3.23918 14.2316 3.04053 13.988 3.04053H8.98668C6.65458 3.04053 4.76268 4.96081 4.76268 7.30677V17.5041C4.76268 19.9636 6.74824 21.9596 9.18336 21.9596H16.6386C18.9613 21.9596 20.8439 20.0582 20.8439 17.7122V10.1068C20.8439 9.8703 20.6565 9.68111 20.4224 9.68111C20.2046 9.68111 19.9649 9.68387 19.7447 9.68641C19.6257 9.68779 19.5123 9.6891 19.4112 9.68986L19.2517 9.69057C19.0631 9.69057 18.8495 9.68875 18.6092 9.68672C18.3004 9.6841 17.9474 9.68111 17.5471 9.68111C15.8331 9.67165 14.4189 8.25272 14.4189 6.52163V3.47566ZM16.5535 3.58161C16.2735 3.28742 15.7837 3.48985 15.7837 3.89756V6.39109C15.7837 7.43731 16.6369 8.29907 17.6728 8.29907C18.3256 8.30569 19.2331 8.30853 20.003 8.30569C20.3973 8.30475 20.5977 7.82893 20.3242 7.54231C19.8309 7.02425 19.1435 6.30216 18.4527 5.57651C17.7586 4.84732 17.061 4.11453 16.5535 3.58161Z" fill="#D0D0D0" />
                    <path d="M12.8033 17.3393V10.7802" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M9.52373 14.0597H16.0828" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <p>Add Project</p>
            </a>
            <a href="/IntermediateResidents" class="footer-link">
                <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M13.9881 3.04053C14.2316 3.04053 14.4189 3.23918 14.4189 3.47566V6.52163C14.4189 8.25272 15.8331 9.67165 17.5471 9.68111C18.2589 9.68111 18.8208 9.69057 19.2517 9.69057L19.4112 9.68986C19.6992 9.68767 20.0868 9.68111 20.4224 9.68111C20.6566 9.68111 20.8439 9.8703 20.8439 10.1068V17.7122C20.8439 20.0582 18.9613 21.9596 16.6386 21.9596H9.18338C6.74826 21.9596 4.7627 19.9636 4.7627 17.5041V7.30677C4.7627 4.96081 6.6546 3.04053 8.9867 3.04053H13.9881ZM14.9902 15.2433H9.89518C9.51118 15.2433 9.19275 15.5555 9.19275 15.9433C9.19275 16.3311 9.51118 16.6528 9.89518 16.6528H14.9902C15.3742 16.6528 15.6926 16.3311 15.6926 15.9433C15.6926 15.5555 15.3742 15.2433 14.9902 15.2433ZM13.0608 10.5135H9.89518C9.51118 10.5135 9.19275 10.8352 9.19275 11.223C9.19275 11.6108 9.51118 11.923 9.89518 11.923H13.0608C13.4448 11.923 13.7633 11.6108 13.7633 11.223C13.7633 10.8352 13.4448 10.5135 13.0608 10.5135ZM15.7837 3.89756C15.7837 3.48985 16.2735 3.28742 16.5536 3.58161C17.566 4.64486 19.3352 6.50365 20.3243 7.54231C20.5977 7.82893 20.3973 8.30475 20.003 8.30569C19.2331 8.30853 18.3256 8.30569 17.6728 8.29907C16.6369 8.29907 15.7837 7.43731 15.7837 6.39109V3.89756Z" fill="#D0D0D0" />
                </svg>
                <p>Manage Projects</p>
            </a>
        }
        else
        {
            <a href="/AddIntermediateResident" class="footer-link">
                <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M14.4189 3.47566C14.4189 3.23918 14.2316 3.04053 13.988 3.04053H8.98668C6.65458 3.04053 4.76268 4.96081 4.76268 7.30677V17.5041C4.76268 19.9636 6.74824 21.9596 9.18336 21.9596H16.6386C18.9613 21.9596 20.8439 20.0582 20.8439 17.7122V10.1068C20.8439 9.8703 20.6565 9.68111 20.4224 9.68111C20.2046 9.68111 19.9649 9.68387 19.7447 9.68641C19.6257 9.68779 19.5123 9.6891 19.4112 9.68986L19.2517 9.69057C19.0631 9.69057 18.8495 9.68875 18.6092 9.68672C18.3004 9.6841 17.9474 9.68111 17.5471 9.68111C15.8331 9.67165 14.4189 8.25272 14.4189 6.52163V3.47566ZM16.5535 3.58161C16.2735 3.28742 15.7837 3.48985 15.7837 3.89756V6.39109C15.7837 7.43731 16.6369 8.29907 17.6728 8.29907C18.3256 8.30569 19.2331 8.30853 20.003 8.30569C20.3973 8.30475 20.5977 7.82893 20.3242 7.54231C19.8309 7.02425 19.1435 6.30216 18.4527 5.57651C17.7586 4.84732 17.061 4.11453 16.5535 3.58161Z" fill="#D0D0D0" />
                    <path d="M12.8033 17.3393V10.7802" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M9.52373 14.0597H16.0828" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <p>Add Project</p>
            </a>
            <a href="/IntermediateResidents" class="footer-link">
                <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M13.9881 3.04053C14.2316 3.04053 14.4189 3.23918 14.4189 3.47566V6.52163C14.4189 8.25272 15.8331 9.67165 17.5471 9.68111C18.2589 9.68111 18.8208 9.69057 19.2517 9.69057L19.4112 9.68986C19.6992 9.68767 20.0868 9.68111 20.4224 9.68111C20.6566 9.68111 20.8439 9.8703 20.8439 10.1068V17.7122C20.8439 20.0582 18.9613 21.9596 16.6386 21.9596H9.18338C6.74826 21.9596 4.7627 19.9636 4.7627 17.5041V7.30677C4.7627 4.96081 6.6546 3.04053 8.9867 3.04053H13.9881ZM14.9902 15.2433H9.89518C9.51118 15.2433 9.19275 15.5555 9.19275 15.9433C9.19275 16.3311 9.51118 16.6528 9.89518 16.6528H14.9902C15.3742 16.6528 15.6926 16.3311 15.6926 15.9433C15.6926 15.5555 15.3742 15.2433 14.9902 15.2433ZM13.0608 10.5135H9.89518C9.51118 10.5135 9.19275 10.8352 9.19275 11.223C9.19275 11.6108 9.51118 11.923 9.89518 11.923H13.0608C13.4448 11.923 13.7633 11.6108 13.7633 11.223C13.7633 10.8352 13.4448 10.5135 13.0608 10.5135ZM15.7837 3.89756C15.7837 3.48985 16.2735 3.28742 16.5536 3.58161C17.566 4.64486 19.3352 6.50365 20.3243 7.54231C20.5977 7.82893 20.3973 8.30475 20.003 8.30569C19.2331 8.30853 18.3256 8.30569 17.6728 8.29907C16.6369 8.29907 15.7837 7.43731 15.7837 6.39109V3.89756Z" fill="#D0D0D0" />
                </svg>
                <p>Manage Projects</p>
            </a>
        }
        <a href="/settings" class="footer-link">
            <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M13.6747 3.09274C14.3861 3.09274 15.0303 3.48785 15.386 4.07109C15.559 4.35331 15.6744 4.70138 15.6455 5.06826C15.6263 5.35048 15.7128 5.63269 15.8667 5.89609C16.357 6.69571 17.4433 6.99674 18.2893 6.54519C19.2411 5.99957 20.4428 6.32883 20.9908 7.26014L21.6349 8.37019C22.1925 9.30151 21.8849 10.4962 20.9235 11.0324C20.1063 11.5122 19.8179 12.5752 20.3082 13.3842C20.462 13.6382 20.6351 13.8546 20.9043 13.9863C21.2408 14.165 21.5003 14.4473 21.683 14.7295C22.0387 15.3127 22.0099 16.0277 21.6638 16.658L20.9908 17.7868C20.6351 18.3889 19.9717 18.7652 19.2892 18.7652C18.9527 18.7652 18.5777 18.6711 18.2701 18.483C18.0201 18.323 17.7317 18.2666 17.4241 18.2666C16.4723 18.2666 15.6744 19.0474 15.6455 19.9787C15.6455 21.0605 14.7611 21.9072 13.6555 21.9072H12.348C11.2328 21.9072 10.3483 21.0605 10.3483 19.9787C10.3291 19.0474 9.53117 18.2666 8.57941 18.2666C8.26215 18.2666 7.97374 18.323 7.7334 18.483C7.42575 18.6711 7.0412 18.7652 6.71434 18.7652C6.02214 18.7652 5.35879 18.3889 5.00308 17.7868L4.33973 16.658C3.98402 16.0465 3.96479 15.3127 4.3205 14.7295C4.47432 14.4473 4.76274 14.165 5.08961 13.9863C5.35879 13.8546 5.53184 13.6382 5.69527 13.3842C6.17596 12.5752 5.88755 11.5122 5.07038 11.0324C4.11861 10.4962 3.81097 9.30151 4.35896 8.37019L5.00308 7.26014C5.56068 6.32883 6.75279 5.99957 7.71417 6.54519C8.55057 6.99674 9.63692 6.69571 10.1272 5.89609C10.281 5.63269 10.3676 5.35048 10.3483 5.06826C10.3291 4.70138 10.4349 4.35331 10.6175 4.07109C10.9732 3.48785 11.6174 3.11156 12.3192 3.09274H13.6747ZM13.0114 9.84713C11.502 9.84713 10.281 11.0324 10.281 12.5094C10.281 13.9863 11.502 15.1622 13.0114 15.1622C14.5207 15.1622 15.7128 13.9863 15.7128 12.5094C15.7128 11.0324 14.5207 9.84713 13.0114 9.84713Z" fill="#D0D0D0" />
            </svg>
            <p>Setting </p>
        </a>
    </div>
</footer>

@code {

    [Parameter]
    public string E_GUID { get; set; }
    List<codeprojectstatus1> ProjectStatus = new List<codeprojectstatus1>();
    List<codeprojectstatus1> ProjectStatus1 = new List<codeprojectstatus1>();
    List<Country> CountryList = new List<Country>();
    RestService restService;
    public string role { get; set; }
    public string token { get; set; }
    private List<codediseaseenglish> codeDisease = new();
    private List<codesetting1> codeSettings1 = new();
    private List<ToolTips> toolTips = new();
    private List<codeexposure1> codeexposure1 = new();
    public string Role { get; set; }
    public string FETPCountry { get; set; }
    public string FETPRegion { get; set; }
    public int program { get; set; }
    protected bool IsDisabled { get; set; }
    public string enability = "";
    public string display1 = "";
    bool isShowSubmit = false;
    bool isSHowUmbrellaText = false;
    bool isShowUmbrella = false;
    bool isShowDates = true;
    bool submitshow = false;
    bool hideon10 = true;
    bool showvalidate = false;
    bool showon10 = true;
    bool hideon20 = false;
    bool display = false;
    bool UmbrellaVal1 = false;
    bool isShowSummary = false;
    bool generalcomments = false;
    bool UmbrellaVal2 = false;
    bool UmbrellaVal3 = false;
    bool UmbrellaVal4 = false;
    bool UmbrellaVal5 = false;
    bool UmbrellaVal6 = false;
    bool UmbrellaVal7 = false;
    bool UmbrellaVal8 = false;
    public DateTime? SubmissionDate { get; set; }
    public DateTime? assignedDate { get; set; }
    public DateTime? firstPublished { get; set; }
    public DateTime? DateInitialFindings { get; set; }
    public DateTime? LaboratoryConfirmation { get; set; }
    public DateTime? EndDateofActivity { get; set; }
    public DateTime? outbreakDate { get; set; }
    public DateTime? outbreakDateEnd { get; set; }
    public DateTime? outbreakDateDetection { get; set; }
    public DateTime? reportingDate { get; set; }
    public DateTime? publicHealth { get; set; }
    public DateTime? dateLabortary { get; set; }
    private IntermediateResidentData data = new IntermediateResidentData();
    private UmbrellaProtocolViewModel umbrellaProtocolData = new();
    List<codeprojectclassification1> projectClassification = new List<codeprojectclassification1>();
    private List<codetypeclass> codetypeclasses;
    private List<CodeTargetPopulation1> TargetPopulation1 = new();
    private List<CodeCdcRole> codeCdcRoles = new();
    private List<string> codereqwritingtype1;
    private List<string> oneHealth11;
    private List<string> oneHealth21;
    private string Classification { get; set; } = string.Empty;
    private string dummyvalue { get; set; }
    private string hasfile { get; set; }
    private string file { get; set; }
    List<WrittenCommunication> files = new List<WrittenCommunication>();
    List<CommentsTab> comments = new List<CommentsTab>();
    ToolTipsModel tooltip = new ToolTipsModel();
    private bool IsDropdownDisabled;
    public string country { get; set; }
    public string Name { get; set; }
    public string LabelComment { get; set; }
    public string UserName { get; set; }
    protected async override Task OnInitializedAsync()
    {
        try
        {
            token = await local.GetItemAsync<string>("oauth_token");
            if (token != null)
            {
                program = await local.GetItemAsync<int>("FETPProgram");
                Role = await local.GetItemAsync<string>("UserRole");
                Name = await local.GetItemAsync<string>("Name");
                LabelComment = Name + " " + DateTime.Now.ToString();
                data.Country = await local.GetItemAsync<string>("FETPCountry");
                data.WHORegion = await local.GetItemAsync<string>("FETPRegion");
                data.FETP = await local.GetItemAsync<string>("FETP");
                if (Role == "Resident")
                {
                    data.LeadResident = await local.GetItemAsync<string>("Name");
                    UserName = await local.GetItemAsync<string>("Name");
                }

                if (Role == "Resident")
                {
                    country = null;
                }
                else if (Role == "Non-Resident")
                {
                    country = await local.GetItemAsync<string>("country");
                }

                IsDropdownDisabled = Role == "Resident";
                this.StateHasChanged();
                restService = new RestService();
                TargetPopulation1 = await restService.GetcodeTargetPopulation();
                ProjectStatus = await restService.GetProjectStatus();
                ProjectStatus1 = await restService.GetProjStatus();
                CountryList = await restService.GetCountries();
                var email = await local.GetItemAsync<string>("UserName");
                projectClassification = await restService.getClassifcations();
                data.TeamMembers = await restService.GetTeamMember(email);
                data.LeadResidents = await restService.GetLeadResidents(email);
                data.Supervisors = await restService.GetSuperVisors(email);
                data.Mentors = await restService.GetMentor(email);
                data.Mentors = await restService.GetMentors(email);
                codereqwritingtype1 = await restService.GetCodeReqWritingType1();
                oneHealth11 = await restService.GetOneHealth11();
                oneHealth21 = await restService.GetOneHealth21();
                codeCdcRoles = await restService.GetCodeCdcRoles();
                codeDisease = await restService.GetCodeDiseaseenglish();
                codeSettings1 = await restService.GetCodeSetting1();
                codeexposure1 = await restService.Getcodeexposure1();
                toolTips = await restService.GetToolTips();
                foreach (var tools in toolTips)
                {
                    if (tools.FieldName == "FETP")
                    {
                        tooltip.FETP = tools.HelpText;
                    }
                    if (tools.FieldName == "Project Type")
                    {
                        tooltip.ProjectType = tools.HelpText;
                    }
                    if (tools.FieldName == "Project Classification")
                    {
                        tooltip.ProjectClassification = tools.HelpText;
                    }
                    if (tools.FieldName == "Date Assigned")
                    {
                        tooltip.DateAssigned = tools.HelpText;
                    }
                    if (tools.FieldName == "Project Title")
                    {
                        tooltip.Title = tools.HelpText;
                    }
                    if (tools.FieldName == "Mentors")
                    {
                        tooltip.Mentors = tools.HelpText;
                    }
                    if (tools.FieldName == "Suspected Disease/Event")
                    {
                        tooltip.SuspectedDisease = tools.HelpText;
                    }
                    if (tools.FieldName == "Date of outbreak start")
                    {
                        tooltip.OutbreakStart = tools.HelpText;
                    }
                    if (tools.FieldName == "Date of outbreak end")
                    {
                        tooltip.OutbreakEnd = tools.HelpText;
                    }
                    if (tools.FieldName == "Date of outbreak detection")
                    {
                        tooltip.OutbreakDect = tools.HelpText;
                    }
                    if (tools.FieldName == "Setting")
                    {
                        tooltip.Setting = tools.HelpText;
                    }
                    if (tools.FieldName == "Secondary Suspected Disease/Event")
                    {
                        tooltip.SecondarySuspectedDisease = tools.HelpText;
                    }

                    if (tools.FieldName == "Number of Initial Cases")
                    {
                        tooltip.InitialCases = tools.HelpText;
                    }
                    if (tools.FieldName == "City")
                    {
                        tooltip.City = tools.HelpText;
                    }
                }
                IsDisabled = false;
                isShowUmbrella = false;
                isShowDates = true;
                hideon10 = true;
                hideon20 = false;
                showon10 = true;
                //if (E_GUID == "dummy_guid")
                isShowSubmit = true;
                var codeTypedata = await Http.GetStringAsync(RedPett.Components.Components.ProjectsComponentr.API_URL + "Projects/GetCodeType");
                if (!string.IsNullOrEmpty(codeTypedata))
                {
                    codetypeclasses = JsonConvert.DeserializeObject<List<codetypeclass>>(codeTypedata);
                    codetypeclasses = codetypeclasses?.Count > 0 ? codetypeclasses.OrderBy(x => x.ID).ToList() : new();
                }

                //_listData = await _OfflineDataService.GetDataFromOfflineDB();
                // var json = await Http.GetStringAsync(RedPett.Components.Components.ProjectsComponentr.API_URL + "Projects/GetIntermediateResidents");

                files = await local.GetItemAsync<List<WrittenCommunication>>("files");
                comments = await local.GetItemAsync<List<CommentsTab>>("comments");

                _listData = await restService.GetIntermediateResidents(country, UserName);
                string Scountry = null;
                _listDataT = await restService.GetIntermediateResidents(Scountry, UserName);
                _listData2 = await restService.GetIntermediateResidents2();
                _listData3 = await restService.GetPEPFAR();
                if (_listDataT != null)
                {
                    if (_listDataT.intermediateResidents != null)
                    {
                        foreach (var obj in _listDataT.intermediateResidents)
                        {
                            if (!string.IsNullOrEmpty(obj.TraineeAssigned))
                            {
                                data.TeamMembers = await restService.GetTeamMember(email);


                                // obj.TeamMembers = obj.TraineeAssigned.Split("|").ToList();
                            }
                            if (!string.IsNullOrEmpty(obj.MentorFullName))
                            {

                                data.Mentors = await restService.GetMentor(email);
                                data.Mentors = await restService.GetMentors(email);
                                // obj.Mentors = obj.MentorFullName.Split("|").ToList();
                            }
                        }

                        var _data = _listData.intermediateResidents.Find(x => x.GlobalRecordId == E_GUID);
                        var _data1 = _listData2.intermediateResidents.Find(x => x.GlobalRecordId == E_GUID);
                        var _data2 = _listData3.intermediateResidents.Find(x => x.GlobalRecordId == E_GUID);

                        if (_data != null)
                        {
                            assignedDate = Convert.ToDateTime(_data.DateAssigned);
                            outbreakDate = Convert.ToDateTime(_data.Outbreakstart);
                            outbreakDateEnd = Convert.ToDateTime(_data.DateOutbreakEnd);
                            outbreakDateDetection = Convert.ToDateTime(_data.Outbreakdetection);
                            reportingDate = _data.OutbreakReporting == null ? null : Convert.ToDateTime(_data.OutbreakReporting);
                            publicHealth = _data.PublicHealthResponse == null ? null : Convert.ToDateTime(_data.PublicHealthResponse);
                            DateInitialFindings = _data.DateInitialFindings == null ? null : Convert.ToDateTime(_data.DateInitialFindings);
                            firstPublished = _data.DateFirstPublic == null ? null : Convert.ToDateTime(_data.DateFirstPublic);
                            LaboratoryConfirmation = _data.LaboratoryConfirmation == null ? null : Convert.ToDateTime(_data.LaboratoryConfirmation);
                            data = _data;
                            data.ValidityDate4 = _data1.ValidityDate4;
                            data.ValidityDate5 = _data1.ValidityDate5;
                            data.ValidityDate6 = _data1.ValidityDate6;
                            data.Transgender = _data1.Transgender;
                            data.ProjectTravel = _data1.ProjectTravel;
                            data.PWID = _data1.PWID;
                            data.questionnaires = _data1.questionnaires;
                            data.ONEHealth1 = _data1.ONEHealth1;
                            data.ONEHealth2 = _data1.ONEHealth2;
                            data.FinalNumberAffect = _data1.FinalNumberAffect;
                            data.Female = _data1.Female;
                            data.DiseaseFinal = _data1.DiseaseFinal;
                            data.Children5 = _data1.ChildLs5;
                            data.Children511 = _data1.ChildGr5;
                            data.Children1219 = _data1.Adolescents;
                            data.Children2060 = _data1.Adults;
                            data.Children61 = _data1.Elderly;
                            data.ProjHIVMonitoring = _data2.ProjHIVMonitoring;
                            if (data.ProjHIVMonitoring == "Yes")
                            {
                                showtextboxPep = true;
                            }
                            if (_data2 != null)
                            {
                                data.SIMS = _data2.SIMS1;
                                data.EA = _data2.EA1;
                                data.DQASQA = _data2.DQASQA1;
                                data.DATIM = _data2.DATIM1;
                                data.ART = _data2.ART1;
                                data.PMTCT = _data2.PMTCT1;
                                data.TBHIV = _data2.TBHIV1;
                                data.KeyPopulations = _data2.KeyPopulations1;
                                data.ResponseToDatRequest = _data2.HIVDataRequest;
                                data.Stigma = _data2.HIVStigma;
                            }

                            if (data.problemDescription != null)
                            {
                                isShowSummary = true;
                                this.StateHasChanged();
                            }

                            if (data.deployment == "Yes")
                            {
                                showdeployments = true;
                                this.StateHasChanged();
                            }

                            data.WrittenCommunications = files.Where(x => x.GlobalRecordId == E_GUID).ToList();
                            data.CommentsTab = comments.Where(x => x.projectID == E_GUID).ToList();
                            if (data.WrittenCommunications.Count > 0)
                            {
                                hasfile = "hasfile";
                            }
                            data.TeamMembers = await restService.GetTeamMember(email);
                            data.LeadResidents = await restService.GetLeadResidents(email);
                            data.Supervisors = await restService.GetSuperVisors(email);
                            data.Mentors = await restService.GetMentor(email);
                            data.Mentors = await restService.GetMentors(email);

                        }
                    }
                    else
                    {
                        data.TeamMembers = await restService.GetTeamMember(email);
                        data.Mentors = await restService.GetMentor(email);
                        data.Mentors = await restService.GetMentors(email);
                        _listData.intermediateResidents = new List<IntermediateResidentData>();
                    }
                }
                else
                {
                    _listData = new ListIntermediateResidentData();
                    _listData.intermediateResidents = new List<IntermediateResidentData>();
                }
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("initDatePicker");
        }
    }

    private void SaveUmbrellaData()
    {
        data.problemDescription = umbrellaProtocolData.problemDescription;
        data.TeamComposition = umbrellaProtocolData.TeamComposition;
        data.InvestivationObjective = umbrellaProtocolData.InvestivationObjective;
        data.ProjectSupporting = umbrellaProtocolData.ProjectSupporting;
        data.DataForCollection = umbrellaProtocolData.DataForCollection;
        data.AnticipatedScope = umbrellaProtocolData.AnticipatedScope;
        data.ReportingRecommendations = umbrellaProtocolData.ReportingRecommendations;
        data.ImprovementDescription = umbrellaProtocolData.ImprovementDescription;
        data.Research_orNon = umbrellaProtocolData.Research_orNon;
        data.TargetPopulation = umbrellaProtocolData.TargetPopulation;
        data.CDCRole = umbrellaProtocolData.CDCRole;
    }
    private async Task SaveData()
    {
        data.author = Name;
        submitshow = true;
        this.StateHasChanged();
        if (data.GlobalRecordId == null && !ValidateGUID())
        {
            data.GUID = Guid.NewGuid().ToString();
        }
        //Section 1
        data.TeamMembers = await js.InvokeAsync<List<string>>("getListVal", ".teamMembers");
        data.TraineeAssigned = string.Empty;
        if (data.TeamMembers.Count > 0) data.TraineeAssigned = string.Join("|", data.TeamMembers);

        data.Mentors = await js.InvokeAsync<List<string>>("getListVal", ".mentors");
        data.MentorFullName = string.Empty;
        if (data.Mentors.Count > 0) data.MentorFullName = string.Join("|", data.Mentors);

        var writtenCommunications = new List<WrittenCommunication>();
        var generalComments = new List<CommentsTab>();
        var lst = await js.InvokeAsync<List<string>>("getAllFiles", Role);
        foreach (string str in lst)
        {
            var arr = str.Split("|");
            if (arr.Length > 7)
            {
                if (arr[3] != "Choose a file")
                {
                    writtenCommunications.Add(new WrittenCommunication(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12]));
                }
            }
        }
        data.WrittenCommunications = writtenCommunications;
        data.HasAttachment = writtenCommunications.Count > 0 ? true : false;
        var lst1 = await js.InvokeAsync<List<string>>("getAllComments");
        foreach (string str in lst1)
        {
            var arr = str.Split("|");
            if (arr.Length > 0)
            {
                generalComments.Add(new CommentsTab(arr[0]));
            }
        }
        data.CommentsTab = generalComments;
        //Section 2
        data.ValidityDate1 = await js.InvokeAsync<string>("getRadioVal", "ValidityDate1");
        data.ValidityDate3 = await js.InvokeAsync<string>("getRadioVal", "ValidityDate3");
        data.ValidityDate2 = await js.InvokeAsync<string>("getRadioVal", "ValidityDate3d");
        data.ValidityDate4 = await js.InvokeAsync<string>("getRadioVal", "ValidityDate3s");
        data.ValidityDate5 = await js.InvokeAsync<string>("getRadioVal", "ValidityDate33s");
        data.ProjHIVMonitoring = await js.InvokeAsync<string>("getRadioVal", "Pep");
        data.ValidityDate6 = await js.InvokeAsync<string>("getRadioVal", "valid");
        data.Setting = await js.InvokeAsync<string>("getIpVal", "#mySelect");
        data.Type = await js.InvokeAsync<string>("getIpValText", "#pj option:selected");
        data.TypeId = await js.InvokeAsync<string>("getIpVal", "#pj");
        data.FETP = await js.InvokeAsync<string>("getIpVal", "#sRoleId");
        data.deployment = await js.InvokeAsync<string>("getRadioVal", "deployment");
        data.ProjectTravel = await js.InvokeAsync<string>("getRadioVal", "travelfromfield");
        data.questionnaires = await js.InvokeAsync<string>("getRadioVal", "FinalOutcome");

        //Section 3
        data.HIVStatus = await js.InvokeAsync<string>("getRadioVal", "HIVStatus");
        data.ART = await js.InvokeAsync<string>("getRadioVal", "ART");
        data.ART = await js.InvokeAsync<string>("getRadioVal", "ART");
        data.PMTCT = await js.InvokeAsync<string>("getRadioVal", "PMTCT");
        data.TBHIV = await js.InvokeAsync<string>("getRadioVal", "TBHIV");
        data.KeyPopulations = await js.InvokeAsync<string>("getRadioVal", "KeyPopulations");
        data.PEPFAROversight = await js.InvokeAsync<string>("getRadioVal", "PEPFAROversight");
        data.ResponseToDatRequest = await js.InvokeAsync<string>("getRadioVal", "ResponseToDatRequest");
        data.AddAyPopulation = await js.InvokeAsync<string>("getRadioVal", "AddAyPopulation");
        data.AddPopulation = await js.InvokeAsync<string>("getRadioVal", "AddPopulation");
        data.Stigma = await js.InvokeAsync<string>("getRadioVal", "Stigma");
        data.Research_orNon = await js.InvokeAsync<string>("getRadioVal", "resrch");
        data.OutbreakReporting = reportingDate.ToString();
        data.PublicHealthResponse = publicHealth.ToString();
        data.DateFirstPublic = firstPublished.ToString();
        data.DateInitialFindings = DateInitialFindings.ToString();
        data.LaboratoryConfirmation = LaboratoryConfirmation;
        data.EndDateofActivity = EndDateofActivity.ToString();
        data.DateAssigned = assignedDate.ToString();
        data.Outbreakstart = outbreakDate.ToString();
        data.DateOutbreakEnd = outbreakDateEnd.ToString();
        data.Outbreakdetection = outbreakDateDetection.ToString();
        //Section 4
        data.DateFirstPublic = await js.InvokeAsync<string>("getIpVal", "#datepicker9");
        data.EndDateofActivity = await js.InvokeAsync<string>("getIpVal", "#datepicker11");
        data.WrittenDocumentAvailable = await js.InvokeAsync<string>("getRadioVal", "WrittenDocumentAvailable");
        data.FinalOutcome = await js.InvokeAsync<string>("getRadioVal", "FinalOutcome");
        data.UpdateDateTime = DateTime.Now;
        if (UmbrellaVal1)
        {
            data.DataForCollection = "Data or specimens collected from individuals";
        }
        else if (UmbrellaVal2)
        {
            data.DataForCollection = "Data collected from focus groups or other groups of individuals";
        }
        else if (UmbrellaVal3)
        {
            data.DataForCollection = "Data from routine surveillance or public health activities about individuals";
        }
        else if (UmbrellaVal4)
        {
            data.DataForCollection = "Administrative information on public health activities";
        }
        else if (UmbrellaVal5)
        {
            data.DataForCollection = "Data on health facilities, programs, or units (NOT persons)";
        }
        else if (UmbrellaVal6)
        {
            data.DataForCollection = "Unlinked or anonymous individual data or specimens collected for another purpose";
        }
        else if (UmbrellaVal7)
        {
            data.DataForCollection = "Data or specimens from deceased persons";
        }
        else if (UmbrellaVal8)
        {
            data.DataForCollection = "Data or specimens from vertebrate animals";
        }
        if (_listData != null)
        {
            var _data = _listData.intermediateResidents.Find(x => x.GUID == data.GUID);
            if (_data != null)
            {
                _listData.intermediateResidents.Remove(_data);
                _data = data;
                _listData.intermediateResidents.Add(_data);
            }
            else
            {
                _listData.intermediateResidents.Add(data);
            }
        }
        else
        {
            _listData.intermediateResidents.Add(data);
        }
        _OfflineDataService.InsertOfflineDB(_listData);
        try
        {
            if (data.TraineeAssigned == "select")
            {
                data.TraineeAssigned = null;
            }
            if (data.MentorFullName == "select")
            {
                data.MentorFullName = null;
            }
            RestService service = new RestService();
            if (data.GlobalRecordId == null)
            {
                string result = await service.AddIntermediateResident(data);

                if (result == "Intermediate Residents Added")
                {

                    Snackbar.Add("Data Submitted succesfully..", Severity.Success, (options) =>
               {
                   options.CloseAfterNavigation = true;
               });
                    data.Status = 1;
                    var _data = _listData.intermediateResidents.Find(x => x.GUID == data.GUID);
                    if (_data != null)
                    {
                        _listData.intermediateResidents.Remove(_data);
                        _data = data;
                        _listData.intermediateResidents.Add(_data);
                    }
                    _OfflineDataService.InsertOfflineDB(_listData);
                    NavigationManager.NavigateTo("/IntermediateResidents");
                }
                else
                {
                    Snackbar.Add("Data Could not be saved..", Severity.Error, (options) =>
             {
                 options.CloseAfterNavigation = true;
             });
                    isShowSubmit = false;
                    await Task.Delay(50);
                    StateHasChanged();
                }

            }
            else
            {
                string result = await service.UpdateNewIntermediateResidents(data);
                if (result == "Intermediate Resident Updated")
                {
                    Snackbar.Add("Data Submitted succesfully..", Severity.Success, (options) =>
               {
                   options.CloseAfterNavigation = true;
               });
                    data.Status = 1;
                    var _data = _listData.intermediateResidents.Find(x => x.GUID == data.GUID);
                    if (_data != null)
                    {
                        _listData.intermediateResidents.Remove(_data);
                        _data = data;
                        _listData.intermediateResidents.Add(_data);
                    }
                    _OfflineDataService.InsertOfflineDB(_listData);
                    NavigationManager.NavigateTo("/IntermediateResidents");
                }
                else
                {
                    isShowSubmit = false;
                    await Task.Delay(50);
                    StateHasChanged();
                    NavigationManager.NavigateTo("/IntermediateResidents");

                }
            }
        }
        catch (Exception ex)
        {
            isShowSubmit = true;
            await Task.Delay(50);
            StateHasChanged();
            await JS.InvokeVoidAsync("alert", "Data was not submitted. Error Occured.." + ex.Message);
        }
    }
    private bool ValidateGUID()
    {
        bool IsValid = false;
        if (_listData != null)
        {
            if (data.GUID != null)
            {
                var _data = _listData.intermediateResidents.Find(x => x.GUID == data.GUID);
                if (_data != null)
                {
                    if (data.GUID != null)
                    {
                        IsValid = true;
                    }
                }
            }
        }
        return IsValid;
    }
    private void GoPrevPage()
    {
        if (Role == "Non-Resident")
        {
            NavigationManager.NavigateTo("/dash");
        }
        else
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    @functions {
        async Task Rolechanged(ChangeEventArgs e)
        {
            if (Convert.ToInt32(e.Value) == 0)
            {

            }
            else
            {
                data.Type = await js.InvokeAsync<string>("getIpVal", "#pj");
                projectClassification = await restService.getClassifcations();
                if (Convert.ToInt32(e.Value) >= 10 && Convert.ToInt32(e.Value) <= 18)
                {
                    projectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 10).ToList();
                    data.ProjectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 10).Select(x => x.projectclassification).FirstOrDefault();
                    IsDisabled = false;
                    isShowUmbrella = false;
                    isShowDates = true;
                    hideon10 = true;
                    showon10 = true;
                    isSHowUmbrellaText = true;
                    enability = "";
                    hideon20 = false;
                    ModalDisplay = "block;";
                    ModalClass = "Show";
                    ShowBackdrop = true;
                    this.StateHasChanged();
                }
                if (Convert.ToInt32(e.Value) >= 20 && Convert.ToInt32(e.Value) <= 22)
                {
                    projectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 20).ToList();
                    data.ProjectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 20).Select(x => x.projectclassification).FirstOrDefault();
                    isShowDates = false;
                    hideon10 = false;
                    isShowUmbrella = false;
                    isSHowUmbrellaText = true;
                    hideon20 = true;
                    ModalDisplay = "block;";
                    ModalClass = "Show";
                    ShowBackdrop = true;
                    enability = "";
                    this.StateHasChanged();
                }
                if (Convert.ToInt32(e.Value) >= 30 && Convert.ToInt32(e.Value) <= 32)
                {
                    projectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 30).ToList();
                    data.ProjectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 30).Select(x => x.projectclassification).FirstOrDefault();
                    IsDisabled = true;
                    isShowUmbrella = false;
                    isSHowUmbrellaText = true;
                    isShowDates = false;
                    hideon10 = false;
                    hideon20 = true;
                    ModalDisplay = "block;";
                    ModalClass = "Show";
                    ShowBackdrop = true;
                    enability = "disabled-input";
                    this.StateHasChanged();
                }
                if (Convert.ToInt32(e.Value) >= 40 && Convert.ToInt32(e.Value) <= 43)
                {
                    projectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 40).ToList();
                    data.ProjectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 40).Select(x => x.projectclassification).FirstOrDefault();
                    IsDisabled = true;
                    isShowDates = false;
                    isShowUmbrella = false;
                    isSHowUmbrellaText = true;
                    generalcomments = true;
                    //enability = "disabled-input";
                    //ModalDisplay = "block;";
                    //ModalClass = "Show";
                    ShowBackdrop = true;
                    this.StateHasChanged();
                }
                if (Convert.ToInt32(e.Value) >= 50 && Convert.ToInt32(e.Value) <= 53)
                {
                    projectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 50).ToList();
                    data.ProjectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 50).Select(x => x.projectclassification).FirstOrDefault();
                    IsDisabled = true;
                    isShowUmbrella = false;
                    isSHowUmbrellaText = true;
                    isShowDates = false;
                    generalcomments = true;

                    //enability = "disabled-input";
                    //ModalDisplay = "block;";
                    //ModalClass = "Show";
                    ShowBackdrop = true;
                    this.StateHasChanged();
                }
                if (Convert.ToInt32(e.Value) == 60)
                {
                    projectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 60).ToList();
                    data.ProjectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 60).Select(x => x.projectclassification).FirstOrDefault();
                    IsDisabled = true;
                    isShowUmbrella = false;
                    ModalDisplay = "none";
                    ModalClass = "";
                    ShowBackdrop = false;
                    isSHowUmbrellaText = false;
                    generalcomments = true;
                    isShowDates = false;
                    enability = "disabled-input";
                    this.StateHasChanged();
                }
                if (Convert.ToInt32(e.Value) >= 61 && Convert.ToInt32(e.Value) <= 70)
                {
                    projectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 70).ToList();
                    data.ProjectClassification = projectClassification.Where(x => Convert.ToInt32(x.id) == 70).Select(x => x.projectclassification).FirstOrDefault();
                    IsDisabled = true;
                    isShowUmbrella = false;
                    ModalDisplay = "none";
                    ModalClass = "";
                    ShowBackdrop = false;
                    isSHowUmbrellaText = false;
                    isShowDates = false;
                    generalcomments = true;
                    enability = "disabled-input";
                    this.StateHasChanged();
                }

            }


        }
        async Task checkout(ChangeEventArgs e)
        {
            if (e.Value.ToString() == "088 - Other")
            {
                display = true;
            }
            else
            {
                display = false;
            }
        }
        public bool ishowdrop = false;
        private void CheckboxChanged(ChangeEventArgs e)
        {
            bool isChecked = (bool)e.Value;
            if (isChecked)
            {
                ishowdrop = true;
                this.StateHasChanged();
            }
            else
            {
                ishowdrop = false;
                this.StateHasChanged();
            }
        }
        public bool showtextbox = false;
        public bool showtextboxPep = false;
        private void CheckboxChanged1(ChangeEventArgs e)
        {
            string value = e.Value.ToString();
            selectedOption = value;

            if (selectedOption == "option1")
            {
                showtextbox = true;
                this.StateHasChanged();

            }
            else if (selectedOption == "option2")
            {
                showtextbox = true;
                this.StateHasChanged();

            }
            else
            {
                showtextbox = false;
                this.StateHasChanged();
            }
        }
        private void CheckboxChangedPep(ChangeEventArgs e)
        {
            string value = e.Value.ToString();
            selectedOption = value;

            if (selectedOption == "Yes")
            {
                showtextboxPep = true;
                // Confirm();
                this.StateHasChanged();

            }
            else if (selectedOption == "No")
            {
                showtextboxPep = false;
                this.StateHasChanged();
            }
        }
        private async Task validityChanged1(ChangeEventArgs e)
        {
            string value = e.Value.ToString();
            selectedOption = value;
            data.ValidityDate1 = await js.InvokeAsync<string>("getRadioVal", "ValidityDate1");
        }
        private async Task validityChanged3(ChangeEventArgs e)
        {
            string value = e.Value.ToString();
            selectedOption = value;
            data.ValidityDate3 = await js.InvokeAsync<string>("getRadioVal", "ValidityDate3");
        }
        public bool showdeployments = false;
        private string selectedOption = "option1";
        private void RadioButtonChanged(ChangeEventArgs e)
        {
            string value = e.Value.ToString();

            selectedOption = value;

            if (selectedOption == "Yes")
            {
                showdeployments = true;

            }
            else if (selectedOption == "No")
            {
                showdeployments = false;

            }
            else if (selectedOption == "No Reply")
            {
                showdeployments = false;

            }
            else
            {
                showdeployments = false;
            }
        }
        public bool shownext = false;
        private void RadioButtonChanged1(ChangeEventArgs e)
        {
            string value = e.Value.ToString();

            selectedOption = value;

            if (selectedOption == "Yes")
            {
                shownext = true;

            }
            else if (selectedOption == "No")
            {
                shownext = false;

            }
            else if (selectedOption == "No Reply")
            {
                shownext = false;

            }
            else
            {
                shownext = false;
            }

        }
        bool hidespan = true;
        public void OnDateChange()
        {
            hidespan = false;
            display1 = "none";
            this.StateHasChanged();
            if (assignedDate > DateTime.Today)
            {
                assignedDate = DateTime.Today;
                Snackbar.Add("Future Dates are not allowed", Severity.Error, (options) =>
                 {
                     options.CloseAfterNavigation = true;
                 });
            }
        }
        public void OnDateChangeReporting()
        {
            if (reportingDate > DateTime.Today)
            {
                reportingDate = DateTime.Today;
                Snackbar.Add("Future Dates are not allowed", Severity.Error, (options) =>
                 {
                     options.CloseAfterNavigation = true;
                 });
            }
        }
        public void OnDateChangepublicHealth()
        {
            if (publicHealth > DateTime.Today)
            {
                publicHealth = DateTime.Today;
                Snackbar.Add("Future Dates are not allowed", Severity.Error, (options) =>
                 {
                     options.CloseAfterNavigation = true;
                 });
            }
        }
        public void OnDateChangedateLabortaryh()
        {
            if (dateLabortary > DateTime.Today)
            {
                dateLabortary = DateTime.Today;
                Snackbar.Add("Future Dates are not allowed", Severity.Error, (options) =>
                 {
                     options.CloseAfterNavigation = true;
                 });
            }
        }
        public void OnDateChangeoutBreak()
        {
            if (outbreakDate > DateTime.Today)
            {
                outbreakDate = DateTime.Today;
                Snackbar.Add("Future Dates are not allowed", Severity.Error, (options) =>
                 {
                     options.CloseAfterNavigation = true;
                 });

            }
            if (outbreakDate <= assignedDate)
            {
                outbreakDate = DateTime.Today;
                Snackbar.Add("Outbreak Start date must be > Date Project Assigned: " + assignedDate.Value.Date, Severity.Error, (options) =>
               {
                   options.CloseAfterNavigation = true;
               });
            }
        }
        public void OnDateChangeoutBreakEnd()
        {
            if (outbreakDateEnd > DateTime.Today)
            {
                outbreakDateEnd = DateTime.Today;
                Snackbar.Add("Future Dates are not allowed", Severity.Error, (options) =>
                 {
                     options.CloseAfterNavigation = true;
                 });

            }
            if (outbreakDateEnd <= outbreakDate)
            {
                outbreakDateEnd = DateTime.Today;
                Snackbar.Add("Outbreak End date must be > Outbreak Start Date ", Severity.Error, (options) =>
               {
                   options.CloseAfterNavigation = true;
               });
            }
        }
        public void OnDateChangeDetection()
        {
            if (outbreakDateDetection > DateTime.Today)
            {
                outbreakDateDetection = DateTime.Today;
                Snackbar.Add("Future Dates are not allowed", Severity.Error, (options) =>
                 {
                     options.CloseAfterNavigation = true;
                 });

            }
            if (outbreakDateDetection <= outbreakDate)
            {
                outbreakDateDetection = DateTime.Today;
                Snackbar.Add("Outbreak Detection date must be > Outbreak Start Date ", Severity.Error, (options) =>
               {
                   options.CloseAfterNavigation = true;
               });
            }
            else
            {
                if (outbreakDateDetection <= outbreakDateEnd)
                {
                    outbreakDateDetection = DateTime.Today;
                    Snackbar.Add("Outbreak Detection date must be > Outbreak End Date ", Severity.Error, (options) =>
                   {
                       options.CloseAfterNavigation = true;
                   });
                }
            }
        }
        private void Confirm()
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Please complete the remaining questions for PEPFAR FundedFETPs and Projects");
            parameters.Add("ButtonText", "OK");
            parameters.Add("Color", Color.Success);
            DialogService.Show<MessaageBox>("Confirm?", parameters);
        }
        private void ConfirmUmbrella()
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };
            DialogService.Show<UmbrellaMessageBox>("Message", options);
        }
        public void Close()
        {
            if (hideon10)
            {
                if (data.problemDescription != null && data.TeamComposition != null && data.InvestivationObjective != null && data.AnticipatedScope != null && data.ReportingRecommendations != null)
                {
                    //  ConfirmUmbrella();
                    ModalDisplay = "none";
                    ModalClass = "";
                    ShowBackdrop = false;
                    isShowSummary = true;
                    this.StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Umbrella protocol all fields required, Fill to continue", Severity.Error, (options) =>
               {
                   options.CloseAfterNavigation = true;
               });
                    this.StateHasChanged();
                }
            }
            if (hideon20)
            {
                if (data.ProjectSupporting != null && data.ImprovementDescription != null && data.InvestivationObjective != null && data.ReportingRecommendations != null)
                {
                    // ConfirmUmbrella();
                    ModalDisplay = "none";
                    ModalClass = "";
                    ShowBackdrop = false;
                    isShowSummary = true;
                    this.StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Umbrella protocol all fields required, Fill to continue", Severity.Error, (options) =>
               {
                   options.CloseAfterNavigation = true;
               });
                    this.StateHasChanged();
                }
            }
        }
        public void Cancel()
        {
            ModalDisplay = "none";
            ModalClass = "";
            ShowBackdrop = false;
            this.StateHasChanged();
        }
        public void Open()
        {
            ModalDisplay = "block;";
            ModalClass = "Show";
            ShowBackdrop = true;
            StateHasChanged();
        }
        private async Task DownloadFile(string File_Att, string Att_FileName)
        {
            try
            {
                // Remove the prefix if it exists
                if (File_Att.Contains(","))
                    File_Att = File_Att.Substring(File_Att.IndexOf(',') + 1);

                byte[] fileBytes = Convert.FromBase64String(File_Att);
                string fileName = Att_FileName;

                await JS.InvokeVoidAsync("downloadFile", fileBytes, fileName);
            }
            catch (Exception ex)
            {
                // Handle the exception appropriately
            }
        }

        private async Task DownloadFiles()
        {
            var lst = await js.InvokeAsync<List<string>>("getAllFiles");
            foreach (string str in lst)
            {
                var arr = str.Split("|");
                if (arr.Length > 7)
                {
                    if (arr[3] != "Choose a file")
                    {
                        string base64Data = arr[6].Substring(arr[6].IndexOf(',') + 1);
                        byte[] fileBytes = Convert.FromBase64String(base64Data);
                        string fileName = arr[3];
                        await JS.InvokeVoidAsync("downloadFile", fileBytes, fileName);
                    }
                }
            }

        }
        private async Task RemoveFile()
        {
            file = null;

        }
        private async Task RemoveFileUp()
        {
            hasfile = null;

        }
        public async void OnInputFileChange(InputFileChangeEventArgs e)
        {
            if (e.File.Name != null)
            {
                file = e.File.Name;
            }
        }
    }

}

